# Generated from SqlBase.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00d6")
        buf.write("\u05e0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\3\2\3\2\3\2\7\2\u0082\n\2\f")
        buf.write("\2\16\2\u0085\13\2\3\2\5\2\u0088\n\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u009f\n\5\3\5\3\5\3\5\5\5\u00a4\n\5\3")
        buf.write("\5\3\5\3\5\3\5\5\5\u00aa\n\5\3\5\3\5\5\5\u00ae\n\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00bc")
        buf.write("\n\5\3\5\3\5\3\5\5\5\u00c1\n\5\3\5\3\5\3\5\3\5\5\5\u00c7")
        buf.write("\n\5\3\5\5\5\u00ca\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u00d1\n")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\7\5\u00d8\n\5\f\5\16\5\u00db\13")
        buf.write("\5\3\5\3\5\3\5\5\5\u00e0\n\5\3\5\3\5\3\5\3\5\5\5\u00e6")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u00ed\n\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u00f6\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\5\5\u0112\n\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u011d\n\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\7\5\u0126\n\5\f\5\16\5\u0129\13\5\5\5\u012b\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u0133\n\5\f\5\16\5\u0136")
        buf.write("\13\5\3\5\3\5\5\5\u013a\n\5\3\5\3\5\5\5\u013e\n\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\5\5\u0146\n\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u014c\n\5\3\5\3\5\3\5\7\5\u0151\n\5\f\5\16\5\u0154\13")
        buf.write("\5\3\5\3\5\5\5\u0158\n\5\3\5\3\5\5\5\u015c\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0164\n\5\3\5\3\5\3\5\3\5\7\5\u016a")
        buf.write("\n\5\f\5\16\5\u016d\13\5\3\5\3\5\5\5\u0171\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0180")
        buf.write("\n\5\3\5\3\5\5\5\u0184\n\5\3\5\3\5\3\5\3\5\5\5\u018a\n")
        buf.write("\5\3\5\3\5\5\5\u018e\n\5\3\5\3\5\3\5\3\5\5\5\u0194\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5")
        buf.write("\u01b0\n\5\f\5\16\5\u01b3\13\5\5\5\u01b5\n\5\3\5\3\5\5")
        buf.write("\5\u01b9\n\5\3\5\3\5\5\5\u01bd\n\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u01c5\n\5\3\5\3\5\3\5\3\5\3\5\7\5\u01cc\n\5\f")
        buf.write("\5\16\5\u01cf\13\5\5\5\u01d1\n\5\3\5\3\5\5\5\u01d5\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\7\5\u01e5\n\5\f\5\16\5\u01e8\13\5\5\5\u01ea\n\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\5\5\u01f2\n\5\3\6\5\6\u01f5\n\6\3")
        buf.write("\6\3\6\3\7\3\7\5\7\u01fb\n\7\3\7\3\7\3\7\7\7\u0200\n\7")
        buf.write("\f\7\16\7\u0203\13\7\3\b\3\b\5\b\u0207\n\b\3\t\3\t\3\t")
        buf.write("\3\n\3\n\3\n\3\n\5\n\u0210\n\n\3\13\3\13\3\13\3\13\7\13")
        buf.write("\u0216\n\13\f\13\16\13\u0219\13\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0227\n\r\f\r\16\r")
        buf.write("\u022a\13\r\5\r\u022c\n\r\3\r\3\r\5\r\u0230\n\r\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u0238\n\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u023e\n\16\3\16\7\16\u0241\n\16\f\16\16\16")
        buf.write("\u0244\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u024d")
        buf.write("\n\17\f\17\16\17\u0250\13\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0256\n\17\3\20\3\20\5\20\u025a\n\20\3\20\3\20\5\20\u025e")
        buf.write("\n\20\3\21\3\21\5\21\u0262\n\21\3\21\3\21\3\21\7\21\u0267")
        buf.write("\n\21\f\21\16\21\u026a\13\21\3\21\3\21\3\21\3\21\7\21")
        buf.write("\u0270\n\21\f\21\16\21\u0273\13\21\5\21\u0275\n\21\3\21")
        buf.write("\3\21\5\21\u0279\n\21\3\21\3\21\3\21\5\21\u027e\n\21\3")
        buf.write("\21\3\21\5\21\u0282\n\21\3\22\5\22\u0285\n\22\3\22\3\22")
        buf.write("\3\22\7\22\u028a\n\22\f\22\16\22\u028d\13\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\7\23\u0295\n\23\f\23\16\23\u0298")
        buf.write("\13\23\5\23\u029a\n\23\3\23\3\23\3\23\3\23\3\23\3\23\7")
        buf.write("\23\u02a2\n\23\f\23\16\23\u02a5\13\23\5\23\u02a7\n\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u02b0\n\23\f")
        buf.write("\23\16\23\u02b3\13\23\3\23\3\23\5\23\u02b7\n\23\3\24\3")
        buf.write("\24\3\24\3\24\7\24\u02bd\n\24\f\24\16\24\u02c0\13\24\5")
        buf.write("\24\u02c2\n\24\3\24\3\24\5\24\u02c6\n\24\3\25\3\25\3\25")
        buf.write("\3\25\7\25\u02cc\n\25\f\25\16\25\u02cf\13\25\5\25\u02d1")
        buf.write("\n\25\3\25\3\25\5\25\u02d5\n\25\3\26\3\26\5\26\u02d9\n")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\5\30")
        buf.write("\u02e4\n\30\3\30\5\30\u02e7\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u02ee\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u0301\n\31\7\31\u0303\n\31\f\31\16\31\u0306\13\31\3\32")
        buf.write("\5\32\u0309\n\32\3\32\3\32\5\32\u030d\n\32\3\32\3\32\5")
        buf.write("\32\u0311\n\32\3\32\3\32\5\32\u0315\n\32\5\32\u0317\n")
        buf.write("\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0320\n\33")
        buf.write("\f\33\16\33\u0323\13\33\3\33\3\33\5\33\u0327\n\33\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0330\n\34\3\35\3")
        buf.write("\35\3\36\3\36\5\36\u0336\n\36\3\36\3\36\5\36\u033a\n\36")
        buf.write("\5\36\u033c\n\36\3\37\3\37\3\37\3\37\7\37\u0342\n\37\f")
        buf.write("\37\16\37\u0345\13\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \7 \u0353\n \f \16 \u0356\13 \3 \3 \3 \5 \u035b")
        buf.write("\n \3 \3 \3 \3 \5 \u0361\n \3!\3!\3\"\3\"\3\"\3\"\5\"")
        buf.write("\u0369\n\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0371\n\"\f\"\16")
        buf.write("\"\u0374\13\"\3#\3#\5#\u0378\n#\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u0384\n$\3$\3$\3$\3$\3$\3$\5$\u038c\n$\3$\3")
        buf.write("$\3$\3$\3$\7$\u0393\n$\f$\16$\u0396\13$\3$\3$\3$\5$\u039b")
        buf.write("\n$\3$\3$\3$\3$\3$\3$\5$\u03a3\n$\3$\3$\3$\3$\5$\u03a9")
        buf.write("\n$\3$\3$\5$\u03ad\n$\3$\3$\3$\5$\u03b2\n$\3$\3$\3$\5")
        buf.write("$\u03b7\n$\3%\3%\3%\3%\5%\u03bd\n%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\7%\u03cb\n%\f%\16%\u03ce\13%\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\7&\u03e8\n&\f&\16&\u03eb\13&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\7&\u03f4\n&\f&\16&\u03f7\13&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u0400\n&\3&\5&\u0403\n&\3&\3&\3&\5&\u0408\n&\3")
        buf.write("&\3&\3&\7&\u040d\n&\f&\16&\u0410\13&\5&\u0412\n&\3&\3")
        buf.write("&\5&\u0416\n&\3&\5&\u0419\n&\3&\3&\3&\3&\3&\3&\3&\3&\7")
        buf.write("&\u0423\n&\f&\16&\u0426\13&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\6&\u0438\n&\r&\16&\u0439\3&\3&")
        buf.write("\5&\u043e\n&\3&\3&\3&\3&\6&\u0444\n&\r&\16&\u0445\3&\3")
        buf.write("&\5&\u044a\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\7&\u0461\n&\f&\16&\u0464\13&\5")
        buf.write("&\u0466\n&\3&\3&\3&\3&\3&\3&\3&\5&\u046f\n&\3&\3&\3&\3")
        buf.write("&\5&\u0475\n&\3&\3&\3&\3&\5&\u047b\n&\3&\3&\3&\3&\5&\u0481")
        buf.write("\n&\3&\3&\3&\3&\3&\3&\3&\5&\u048a\n&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u0493\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u049e\n")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\7&\u04a8\n&\f&\16&\u04ab\13")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04b3\n\'\3(\3(\3)\3)\3")
        buf.write("*\3*\3+\3+\5+\u04bd\n+\3+\3+\3+\3+\5+\u04c3\n+\3,\3,\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\7-\u04dc\n-\f-\16-\u04df\13-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\7-\u04e8\n-\f-\16-\u04eb\13-\3-\3-\5-\u04ef\n-\5")
        buf.write("-\u04f1\n-\3-\3-\7-\u04f5\n-\f-\16-\u04f8\13-\3.\3.\5")
        buf.write(".\u04fc\n.\3/\3/\3/\3/\5/\u0502\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\7\62\u0516\n\62\f\62\16\62\u0519\13\62")
        buf.write("\5\62\u051b\n\62\3\62\3\62\3\62\3\62\3\62\7\62\u0522\n")
        buf.write("\62\f\62\16\62\u0525\13\62\5\62\u0527\n\62\3\62\5\62\u052a")
        buf.write("\n\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u053e\n")
        buf.write("\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0549\n\64\3\65\3\65\3\65\3\65\5\65\u054f\n\65\3\66\3")
        buf.write("\66\3\66\3\66\3\66\5\66\u0556\n\66\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u055f\n\67\38\38\38\38\38\58\u0566")
        buf.write("\n8\39\39\39\39\59\u056c\n9\3:\3:\3:\7:\u0571\n:\f:\16")
        buf.write(":\u0574\13:\3;\3;\3;\3;\3;\5;\u057b\n;\3<\3<\3=\3=\5=")
        buf.write("\u0581\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\5>\u05dc\n>\3?\3?\3?\2\b\32\60BHJX@\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|\2\26\3\2\u00ad\u00ae")
        buf.write("\4\2\r\r!!\4\2\20\20\u00c8\u00c8\3\2\u00af\u00b0\3\2\u0087")
        buf.write("\u0088\3\2/\60\3\2,-\4\2\20\20\23\23\3\2\u008b\u008d\3")
        buf.write("\2\u00c0\u00c1\3\2\u00c2\u00c4\3\2\u00ba\u00bf\3\2\20")
        buf.write("\22\3\2)*\3\2;@\3\2]^\3\2wx\3\2yz\3\2\u00a5\u00a6\3\2")
        buf.write("\u00b3\u00b6\2\u070b\2~\3\2\2\2\4\u008b\3\2\2\2\6\u008e")
        buf.write("\3\2\2\2\b\u01f1\3\2\2\2\n\u01f4\3\2\2\2\f\u01f8\3\2\2")
        buf.write("\2\16\u0206\3\2\2\2\20\u0208\3\2\2\2\22\u020b\3\2\2\2")
        buf.write("\24\u0211\3\2\2\2\26\u021c\3\2\2\2\30\u0220\3\2\2\2\32")
        buf.write("\u0231\3\2\2\2\34\u0255\3\2\2\2\36\u0257\3\2\2\2 \u025f")
        buf.write("\3\2\2\2\"\u0284\3\2\2\2$\u02b6\3\2\2\2&\u02c5\3\2\2\2")
        buf.write("(\u02d4\3\2\2\2*\u02d6\3\2\2\2,\u02df\3\2\2\2.\u02ed\3")
        buf.write("\2\2\2\60\u02ef\3\2\2\2\62\u0316\3\2\2\2\64\u0326\3\2")
        buf.write("\2\2\66\u0328\3\2\2\28\u0331\3\2\2\2:\u0333\3\2\2\2<\u033d")
        buf.write("\3\2\2\2>\u0360\3\2\2\2@\u0362\3\2\2\2B\u0368\3\2\2\2")
        buf.write("D\u0375\3\2\2\2F\u03b6\3\2\2\2H\u03bc\3\2\2\2J\u049d\3")
        buf.write("\2\2\2L\u04b2\3\2\2\2N\u04b4\3\2\2\2P\u04b6\3\2\2\2R\u04b8")
        buf.write("\3\2\2\2T\u04ba\3\2\2\2V\u04c4\3\2\2\2X\u04f0\3\2\2\2")
        buf.write("Z\u04fb\3\2\2\2\\\u0501\3\2\2\2^\u0503\3\2\2\2`\u0508")
        buf.write("\3\2\2\2b\u050e\3\2\2\2d\u053d\3\2\2\2f\u0548\3\2\2\2")
        buf.write("h\u054e\3\2\2\2j\u0555\3\2\2\2l\u055e\3\2\2\2n\u0565\3")
        buf.write("\2\2\2p\u056b\3\2\2\2r\u056d\3\2\2\2t\u057a\3\2\2\2v\u057c")
        buf.write("\3\2\2\2x\u0580\3\2\2\2z\u05db\3\2\2\2|\u05dd\3\2\2\2")
        buf.write("~\u0083\5\b\5\2\177\u0080\7\u00d4\2\2\u0080\u0082\5\b")
        buf.write("\5\2\u0081\177\3\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081")
        buf.write("\3\2\2\2\u0083\u0084\3\2\2\2\u0084\u0087\3\2\2\2\u0085")
        buf.write("\u0083\3\2\2\2\u0086\u0088\7\u00d4\2\2\u0087\u0086\3\2")
        buf.write("\2\2\u0087\u0088\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u008a")
        buf.write("\7\2\2\3\u008a\3\3\2\2\2\u008b\u008c\5\b\5\2\u008c\u008d")
        buf.write("\7\2\2\3\u008d\5\3\2\2\2\u008e\u008f\5@!\2\u008f\u0090")
        buf.write("\7\2\2\3\u0090\7\3\2\2\2\u0091\u01f2\5\n\6\2\u0092\u0093")
        buf.write("\7\u0083\2\2\u0093\u01f2\5t;\2\u0094\u0095\7\u0083\2\2")
        buf.write("\u0095\u0096\5t;\2\u0096\u0097\7\3\2\2\u0097\u0098\5t")
        buf.write(";\2\u0098\u01f2\3\2\2\2\u0099\u009a\7d\2\2\u009a\u009e")
        buf.write("\7e\2\2\u009b\u009c\7\u00b7\2\2\u009c\u009d\7\"\2\2\u009d")
        buf.write("\u009f\7$\2\2\u009e\u009b\3\2\2\2\u009e\u009f\3\2\2\2")
        buf.write("\u009f\u00a0\3\2\2\2\u00a0\u00a3\5r:\2\u00a1\u00a2\7a")
        buf.write("\2\2\u00a2\u00a4\5\24\13\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4")
        buf.write("\3\2\2\2\u00a4\u01f2\3\2\2\2\u00a5\u00a6\7\u0086\2\2\u00a6")
        buf.write("\u00a9\7e\2\2\u00a7\u00a8\7\u00b7\2\2\u00a8\u00aa\7$\2")
        buf.write("\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ab")
        buf.write("\3\2\2\2\u00ab\u00ad\5r:\2\u00ac\u00ae\t\2\2\2\u00ad\u00ac")
        buf.write("\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u01f2\3\2\2\2\u00af")
        buf.write("\u00b0\7\u008f\2\2\u00b0\u00b1\7e\2\2\u00b1\u00b2\5r:")
        buf.write("\2\u00b2\u00b3\7\u0090\2\2\u00b3\u00b4\7\u008a\2\2\u00b4")
        buf.write("\u00b5\5t;\2\u00b5\u01f2\3\2\2\2\u00b6\u00b7\7d\2\2\u00b7")
        buf.write("\u00bb\7f\2\2\u00b8\u00b9\7\u00b7\2\2\u00b9\u00ba\7\"")
        buf.write("\2\2\u00ba\u00bc\7$\2\2\u00bb\u00b8\3\2\2\2\u00bb\u00bc")
        buf.write("\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00c0\5r:\2\u00be\u00bf")
        buf.write("\7a\2\2\u00bf\u00c1\5\24\13\2\u00c0\u00be\3\2\2\2\u00c0")
        buf.write("\u00c1\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00c3\7\17\2")
        buf.write("\2\u00c3\u00c9\5\n\6\2\u00c4\u00c6\7a\2\2\u00c5\u00c7")
        buf.write("\7#\2\2\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7")
        buf.write("\u00c8\3\2\2\2\u00c8\u00ca\7\u0098\2\2\u00c9\u00c4\3\2")
        buf.write("\2\2\u00c9\u00ca\3\2\2\2\u00ca\u01f2\3\2\2\2\u00cb\u00cc")
        buf.write("\7d\2\2\u00cc\u00d0\7f\2\2\u00cd\u00ce\7\u00b7\2\2\u00ce")
        buf.write("\u00cf\7\"\2\2\u00cf\u00d1\7$\2\2\u00d0\u00cd\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\5")
        buf.write("r:\2\u00d3\u00d4\7\4\2\2\u00d4\u00d9\5\16\b\2\u00d5\u00d6")
        buf.write("\7\5\2\2\u00d6\u00d8\5\16\b\2\u00d7\u00d5\3\2\2\2\u00d8")
        buf.write("\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2")
        buf.write("\u00da\u00dc\3\2\2\2\u00db\u00d9\3\2\2\2\u00dc\u00df\7")
        buf.write("\6\2\2\u00dd\u00de\7a\2\2\u00de\u00e0\5\24\13\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u01f2\3\2\2\2")
        buf.write("\u00e1\u00e2\7\u0086\2\2\u00e2\u00e5\7f\2\2\u00e3\u00e4")
        buf.write("\7\u00b7\2\2\u00e4\u00e6\7$\2\2\u00e5\u00e3\3\2\2\2\u00e5")
        buf.write("\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u01f2\5r:\2\u00e8")
        buf.write("\u00e9\7i\2\2\u00e9\u00ea\7k\2\2\u00ea\u00ec\5r:\2\u00eb")
        buf.write("\u00ed\5<\37\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2")
        buf.write("\u00ed\u00ee\3\2\2\2\u00ee\u00ef\5\n\6\2\u00ef\u01f2\3")
        buf.write("\2\2\2\u00f0\u00f1\7j\2\2\u00f1\u00f2\7\r\2\2\u00f2\u00f5")
        buf.write("\5r:\2\u00f3\u00f4\7\24\2\2\u00f4\u00f6\5B\"\2\u00f5\u00f3")
        buf.write("\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u01f2\3\2\2\2\u00f7")
        buf.write("\u00f8\7\u008f\2\2\u00f8\u00f9\7f\2\2\u00f9\u00fa\5r:")
        buf.write("\2\u00fa\u00fb\7\u0090\2\2\u00fb\u00fc\7\u008a\2\2\u00fc")
        buf.write("\u00fd\5r:\2\u00fd\u01f2\3\2\2\2\u00fe\u00ff\7\u008f\2")
        buf.write("\2\u00ff\u0100\7f\2\2\u0100\u0101\5r:\2\u0101\u0102\7")
        buf.write("\u0090\2\2\u0102\u0103\7\u0082\2\2\u0103\u0104\5t;\2\u0104")
        buf.write("\u0105\7\u008a\2\2\u0105\u0106\5t;\2\u0106\u01f2\3\2\2")
        buf.write("\2\u0107\u0108\7\u008f\2\2\u0108\u0109\7f\2\2\u0109\u010a")
        buf.write("\5r:\2\u010a\u010b\7\16\2\2\u010b\u010c\7\u0082\2\2\u010c")
        buf.write("\u010d\5\20\t\2\u010d\u01f2\3\2\2\2\u010e\u0111\7d\2\2")
        buf.write("\u010f\u0110\7\37\2\2\u0110\u0112\7h\2\2\u0111\u010f\3")
        buf.write("\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114")
        buf.write("\7g\2\2\u0114\u0115\5r:\2\u0115\u0116\7\17\2\2\u0116\u0117")
        buf.write("\5\n\6\2\u0117\u01f2\3\2\2\2\u0118\u0119\7\u0086\2\2\u0119")
        buf.write("\u011c\7g\2\2\u011a\u011b\7\u00b7\2\2\u011b\u011d\7$\2")
        buf.write("\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e")
        buf.write("\3\2\2\2\u011e\u01f2\5r:\2\u011f\u0120\7\u00a7\2\2\u0120")
        buf.write("\u0121\5r:\2\u0121\u012a\7\4\2\2\u0122\u0127\5n8\2\u0123")
        buf.write("\u0124\7\5\2\2\u0124\u0126\5n8\2\u0125\u0123\3\2\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u0122\3")
        buf.write("\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d")
        buf.write("\7\6\2\2\u012d\u01f2\3\2\2\2\u012e\u0139\7n\2\2\u012f")
        buf.write("\u0134\5p9\2\u0130\u0131\7\5\2\2\u0131\u0133\5p9\2\u0132")
        buf.write("\u0130\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2")
        buf.write("\u0134\u0135\3\2\2\2\u0135\u013a\3\2\2\2\u0136\u0134\3")
        buf.write("\2\2\2\u0137\u0138\7\20\2\2\u0138\u013a\7p\2\2\u0139\u012f")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013b\3\2\2\2\u013b")
        buf.write("\u013d\7V\2\2\u013c\u013e\7f\2\2\u013d\u013c\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\5r:\2\u0140")
        buf.write("\u0141\7\u008a\2\2\u0141\u0145\5t;\2\u0142\u0143\7a\2")
        buf.write("\2\u0143\u0144\7n\2\2\u0144\u0146\7r\2\2\u0145\u0142\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146\u01f2\3\2\2\2\u0147\u014b")
        buf.write("\7o\2\2\u0148\u0149\7n\2\2\u0149\u014a\7r\2\2\u014a\u014c")
        buf.write("\7\63\2\2\u014b\u0148\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\u0157\3\2\2\2\u014d\u0152\5p9\2\u014e\u014f\7\5\2\2\u014f")
        buf.write("\u0151\5p9\2\u0150\u014e\3\2\2\2\u0151\u0154\3\2\2\2\u0152")
        buf.write("\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0158\3\2\2\2")
        buf.write("\u0154\u0152\3\2\2\2\u0155\u0156\7\20\2\2\u0156\u0158")
        buf.write("\7p\2\2\u0157\u014d\3\2\2\2\u0157\u0155\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015b\7V\2\2\u015a\u015c\7f\2\2\u015b")
        buf.write("\u015a\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\u015e\5r:\2\u015e\u015f\7\r\2\2\u015f\u0160\5t")
        buf.write(";\2\u0160\u01f2\3\2\2\2\u0161\u0163\7s\2\2\u0162\u0164")
        buf.write("\7t\2\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0170\3\2\2\2\u0165\u0166\7\4\2\2\u0166\u016b\5h\65\2")
        buf.write("\u0167\u0168\7\5\2\2\u0168\u016a\5h\65\2\u0169\u0167\3")
        buf.write("\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c")
        buf.write("\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u016b\3\2\2\2\u016e")
        buf.write("\u016f\7\6\2\2\u016f\u0171\3\2\2\2\u0170\u0165\3\2\2\2")
        buf.write("\u0170\u0171\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u01f2\5")
        buf.write("\b\5\2\u0173\u0174\7}\2\2\u0174\u0175\7d\2\2\u0175\u0176")
        buf.write("\7f\2\2\u0176\u01f2\5r:\2\u0177\u0178\7}\2\2\u0178\u0179")
        buf.write("\7d\2\2\u0179\u017a\7g\2\2\u017a\u01f2\5r:\2\u017b\u017c")
        buf.write("\7}\2\2\u017c\u017f\7~\2\2\u017d\u017e\t\3\2\2\u017e\u0180")
        buf.write("\5r:\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0183")
        buf.write("\3\2\2\2\u0181\u0182\7&\2\2\u0182\u0184\7\u00c6\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u01f2\3\2\2\2")
        buf.write("\u0185\u0186\7}\2\2\u0186\u0189\7\177\2\2\u0187\u0188")
        buf.write("\t\3\2\2\u0188\u018a\5t;\2\u0189\u0187\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u018c\7&\2\2\u018c")
        buf.write("\u018e\7\u00c6\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2")
        buf.write("\2\2\u018e\u01f2\3\2\2\2\u018f\u0190\7}\2\2\u0190\u0193")
        buf.write("\7\u0080\2\2\u0191\u0192\7&\2\2\u0192\u0194\7\u00c6\2")
        buf.write("\2\u0193\u0191\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u01f2")
        buf.write("\3\2\2\2\u0195\u0196\7}\2\2\u0196\u0197\7\u0081\2\2\u0197")
        buf.write("\u0198\t\3\2\2\u0198\u01f2\5r:\2\u0199\u019a\7m\2\2\u019a")
        buf.write("\u01f2\5r:\2\u019b\u019c\7\60\2\2\u019c\u01f2\5r:\2\u019d")
        buf.write("\u019e\7}\2\2\u019e\u01f2\7\u0085\2\2\u019f\u01a0\7}\2")
        buf.write("\2\u01a0\u01f2\7\u0097\2\2\u01a1\u01a2\7\u0095\2\2\u01a2")
        buf.write("\u01a3\7\u0097\2\2\u01a3\u01a4\5r:\2\u01a4\u01a5\7\u00ba")
        buf.write("\2\2\u01a5\u01a6\5@!\2\u01a6\u01f2\3\2\2\2\u01a7\u01a8")
        buf.write("\7\u0096\2\2\u01a8\u01a9\7\u0097\2\2\u01a9\u01f2\5r:\2")
        buf.write("\u01aa\u01ab\7\u0099\2\2\u01ab\u01b4\7\u009a\2\2\u01ac")
        buf.write("\u01b1\5j\66\2\u01ad\u01ae\7\5\2\2\u01ae\u01b0\5j\66\2")
        buf.write("\u01af\u01ad\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3")
        buf.write("\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b4\u01ac\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("\u01f2\3\2\2\2\u01b6\u01b8\7\u009b\2\2\u01b7\u01b9\7\u009d")
        buf.write("\2\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01f2")
        buf.write("\3\2\2\2\u01ba\u01bc\7\u009c\2\2\u01bb\u01bd\7\u009d\2")
        buf.write("\2\u01bc\u01bb\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01f2")
        buf.write("\3\2\2\2\u01be\u01bf\7}\2\2\u01bf\u01c0\7\u0084\2\2\u01c0")
        buf.write("\u01c1\t\3\2\2\u01c1\u01c4\5r:\2\u01c2\u01c3\7\24\2\2")
        buf.write("\u01c3\u01c5\5B\"\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3")
        buf.write("\2\2\2\u01c5\u01d0\3\2\2\2\u01c6\u01c7\7\33\2\2\u01c7")
        buf.write("\u01c8\7\26\2\2\u01c8\u01cd\5\36\20\2\u01c9\u01ca\7\5")
        buf.write("\2\2\u01ca\u01cc\5\36\20\2\u01cb\u01c9\3\2\2\2\u01cc\u01cf")
        buf.write("\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce")
        buf.write("\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01d0\u01c6\3\2\2\2")
        buf.write("\u01d0\u01d1\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d3\7")
        buf.write("\35\2\2\u01d3\u01d5\t\4\2\2\u01d4\u01d2\3\2\2\2\u01d4")
        buf.write("\u01d5\3\2\2\2\u01d5\u01f2\3\2\2\2\u01d6\u01d7\7\u00a8")
        buf.write("\2\2\u01d7\u01d8\5t;\2\u01d8\u01d9\7\r\2\2\u01d9\u01da")
        buf.write("\5\b\5\2\u01da\u01f2\3\2\2\2\u01db\u01dc\7\u00a9\2\2\u01dc")
        buf.write("\u01dd\7\u00a8\2\2\u01dd\u01f2\5t;\2\u01de\u01df\7\u00aa")
        buf.write("\2\2\u01df\u01e9\5t;\2\u01e0\u01e1\7U\2\2\u01e1\u01e6")
        buf.write("\5@!\2\u01e2\u01e3\7\5\2\2\u01e3\u01e5\5@!\2\u01e4\u01e2")
        buf.write("\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6")
        buf.write("\u01e7\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2")
        buf.write("\u01e9\u01e0\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01f2\3")
        buf.write("\2\2\2\u01eb\u01ec\7m\2\2\u01ec\u01ed\7\u00ab\2\2\u01ed")
        buf.write("\u01f2\5t;\2\u01ee\u01ef\7m\2\2\u01ef\u01f0\7\u00ac\2")
        buf.write("\2\u01f0\u01f2\5t;\2\u01f1\u0091\3\2\2\2\u01f1\u0092\3")
        buf.write("\2\2\2\u01f1\u0094\3\2\2\2\u01f1\u0099\3\2\2\2\u01f1\u00a5")
        buf.write("\3\2\2\2\u01f1\u00af\3\2\2\2\u01f1\u00b6\3\2\2\2\u01f1")
        buf.write("\u00cb\3\2\2\2\u01f1\u00e1\3\2\2\2\u01f1\u00e8\3\2\2\2")
        buf.write("\u01f1\u00f0\3\2\2\2\u01f1\u00f7\3\2\2\2\u01f1\u00fe\3")
        buf.write("\2\2\2\u01f1\u0107\3\2\2\2\u01f1\u010e\3\2\2\2\u01f1\u0118")
        buf.write("\3\2\2\2\u01f1\u011f\3\2\2\2\u01f1\u012e\3\2\2\2\u01f1")
        buf.write("\u0147\3\2\2\2\u01f1\u0161\3\2\2\2\u01f1\u0173\3\2\2\2")
        buf.write("\u01f1\u0177\3\2\2\2\u01f1\u017b\3\2\2\2\u01f1\u0185\3")
        buf.write("\2\2\2\u01f1\u018f\3\2\2\2\u01f1\u0195\3\2\2\2\u01f1\u0199")
        buf.write("\3\2\2\2\u01f1\u019b\3\2\2\2\u01f1\u019d\3\2\2\2\u01f1")
        buf.write("\u019f\3\2\2\2\u01f1\u01a1\3\2\2\2\u01f1\u01a7\3\2\2\2")
        buf.write("\u01f1\u01aa\3\2\2\2\u01f1\u01b6\3\2\2\2\u01f1\u01ba\3")
        buf.write("\2\2\2\u01f1\u01be\3\2\2\2\u01f1\u01d6\3\2\2\2\u01f1\u01db")
        buf.write("\3\2\2\2\u01f1\u01de\3\2\2\2\u01f1\u01eb\3\2\2\2\u01f1")
        buf.write("\u01ee\3\2\2\2\u01f2\t\3\2\2\2\u01f3\u01f5\5\f\7\2\u01f4")
        buf.write("\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6\u01f7\5\30\r\2\u01f7\13\3\2\2\2\u01f8\u01fa\7a")
        buf.write("\2\2\u01f9\u01fb\7b\2\2\u01fa\u01f9\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u0201\5*\26\2\u01fd")
        buf.write("\u01fe\7\5\2\2\u01fe\u0200\5*\26\2\u01ff\u01fd\3\2\2\2")
        buf.write("\u0200\u0203\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3")
        buf.write("\2\2\2\u0202\r\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0207")
        buf.write("\5\20\t\2\u0205\u0207\5\22\n\2\u0206\u0204\3\2\2\2\u0206")
        buf.write("\u0205\3\2\2\2\u0207\17\3\2\2\2\u0208\u0209\5t;\2\u0209")
        buf.write("\u020a\5X-\2\u020a\21\3\2\2\2\u020b\u020c\7&\2\2\u020c")
        buf.write("\u020f\5r:\2\u020d\u020e\t\5\2\2\u020e\u0210\7\u00b1\2")
        buf.write("\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\23\3")
        buf.write("\2\2\2\u0211\u0212\7\4\2\2\u0212\u0217\5\26\f\2\u0213")
        buf.write("\u0214\7\5\2\2\u0214\u0216\5\26\f\2\u0215\u0213\3\2\2")
        buf.write("\2\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u021b\7\6\2\2\u021b\25\3\2\2\2\u021c\u021d\5t;\2\u021d")
        buf.write("\u021e\7\u00ba\2\2\u021e\u021f\5@!\2\u021f\27\3\2\2\2")
        buf.write("\u0220\u022b\5\32\16\2\u0221\u0222\7\33\2\2\u0222\u0223")
        buf.write("\7\26\2\2\u0223\u0228\5\36\20\2\u0224\u0225\7\5\2\2\u0225")
        buf.write("\u0227\5\36\20\2\u0226\u0224\3\2\2\2\u0227\u022a\3\2\2")
        buf.write("\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022c")
        buf.write("\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u0221\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022e\7\35\2")
        buf.write("\2\u022e\u0230\t\4\2\2\u022f\u022d\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230\31\3\2\2\2\u0231\u0232\b\16\1\2\u0232\u0233")
        buf.write("\5\34\17\2\u0233\u0242\3\2\2\2\u0234\u0235\f\4\2\2\u0235")
        buf.write("\u0237\7\u0089\2\2\u0236\u0238\5,\27\2\u0237\u0236\3\2")
        buf.write("\2\2\u0237\u0238\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0241")
        buf.write("\5\32\16\5\u023a\u023b\f\3\2\2\u023b\u023d\t\6\2\2\u023c")
        buf.write("\u023e\5,\27\2\u023d\u023c\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023e\u023f\3\2\2\2\u023f\u0241\5\32\16\4\u0240\u0234")
        buf.write("\3\2\2\2\u0240\u023a\3\2\2\2\u0241\u0244\3\2\2\2\u0242")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\33\3\2\2\2\u0244")
        buf.write("\u0242\3\2\2\2\u0245\u0256\5 \21\2\u0246\u0247\7f\2\2")
        buf.write("\u0247\u0256\5r:\2\u0248\u0249\7c\2\2\u0249\u024e\5@!")
        buf.write("\2\u024a\u024b\7\5\2\2\u024b\u024d\5@!\2\u024c\u024a\3")
        buf.write("\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0256\3\2\2\2\u0250\u024e\3\2\2\2\u0251")
        buf.write("\u0252\7\4\2\2\u0252\u0253\5\30\r\2\u0253\u0254\7\6\2")
        buf.write("\2\u0254\u0256\3\2\2\2\u0255\u0245\3\2\2\2\u0255\u0246")
        buf.write("\3\2\2\2\u0255\u0248\3\2\2\2\u0255\u0251\3\2\2\2\u0256")
        buf.write("\35\3\2\2\2\u0257\u0259\5@!\2\u0258\u025a\t\7\2\2\u0259")
        buf.write("\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025d\3\2\2\2")
        buf.write("\u025b\u025c\7+\2\2\u025c\u025e\t\b\2\2\u025d\u025b\3")
        buf.write("\2\2\2\u025d\u025e\3\2\2\2\u025e\37\3\2\2\2\u025f\u0261")
        buf.write("\7\f\2\2\u0260\u0262\5,\27\2\u0261\u0260\3\2\2\2\u0261")
        buf.write("\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0268\5.\30\2")
        buf.write("\u0264\u0265\7\5\2\2\u0265\u0267\5.\30\2\u0266\u0264\3")
        buf.write("\2\2\2\u0267\u026a\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269")
        buf.write("\3\2\2\2\u0269\u0274\3\2\2\2\u026a\u0268\3\2\2\2\u026b")
        buf.write("\u026c\7\r\2\2\u026c\u0271\5\60\31\2\u026d\u026e\7\5\2")
        buf.write("\2\u026e\u0270\5\60\31\2\u026f\u026d\3\2\2\2\u0270\u0273")
        buf.write("\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u026b\3\2\2\2")
        buf.write("\u0274\u0275\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0277\7")
        buf.write("\24\2\2\u0277\u0279\5B\"\2\u0278\u0276\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u027d\3\2\2\2\u027a\u027b\7\25\2\2\u027b")
        buf.write("\u027c\7\26\2\2\u027c\u027e\5\"\22\2\u027d\u027a\3\2\2")
        buf.write("\2\u027d\u027e\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u0280")
        buf.write("\7\34\2\2\u0280\u0282\5B\"\2\u0281\u027f\3\2\2\2\u0281")
        buf.write("\u0282\3\2\2\2\u0282!\3\2\2\2\u0283\u0285\5,\27\2\u0284")
        buf.write("\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2")
        buf.write("\u0286\u028b\5$\23\2\u0287\u0288\7\5\2\2\u0288\u028a\5")
        buf.write("$\23\2\u0289\u0287\3\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289")
        buf.write("\3\2\2\2\u028b\u028c\3\2\2\2\u028c#\3\2\2\2\u028d\u028b")
        buf.write("\3\2\2\2\u028e\u02b7\5&\24\2\u028f\u0290\7\32\2\2\u0290")
        buf.write("\u0299\7\4\2\2\u0291\u0296\5r:\2\u0292\u0293\7\5\2\2\u0293")
        buf.write("\u0295\5r:\2\u0294\u0292\3\2\2\2\u0295\u0298\3\2\2\2\u0296")
        buf.write("\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u029a\3\2\2\2")
        buf.write("\u0298\u0296\3\2\2\2\u0299\u0291\3\2\2\2\u0299\u029a\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u02b7\7\6\2\2\u029c\u029d")
        buf.write("\7\31\2\2\u029d\u02a6\7\4\2\2\u029e\u02a3\5r:\2\u029f")
        buf.write("\u02a0\7\5\2\2\u02a0\u02a2\5r:\2\u02a1\u029f\3\2\2\2\u02a2")
        buf.write("\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3\2\2\2")
        buf.write("\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6\u029e\3")
        buf.write("\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02b7")
        buf.write("\7\6\2\2\u02a9\u02aa\7\27\2\2\u02aa\u02ab\7\30\2\2\u02ab")
        buf.write("\u02ac\7\4\2\2\u02ac\u02b1\5(\25\2\u02ad\u02ae\7\5\2\2")
        buf.write("\u02ae\u02b0\5(\25\2\u02af\u02ad\3\2\2\2\u02b0\u02b3\3")
        buf.write("\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4")
        buf.write("\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b5\7\6\2\2\u02b5")
        buf.write("\u02b7\3\2\2\2\u02b6\u028e\3\2\2\2\u02b6\u028f\3\2\2\2")
        buf.write("\u02b6\u029c\3\2\2\2\u02b6\u02a9\3\2\2\2\u02b7%\3\2\2")
        buf.write("\2\u02b8\u02c1\7\4\2\2\u02b9\u02be\5@!\2\u02ba\u02bb\7")
        buf.write("\5\2\2\u02bb\u02bd\5@!\2\u02bc\u02ba\3\2\2\2\u02bd\u02c0")
        buf.write("\3\2\2\2\u02be\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf")
        buf.write("\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c1\u02b9\3\2\2\2")
        buf.write("\u02c1\u02c2\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c6\7")
        buf.write("\6\2\2\u02c4\u02c6\5@!\2\u02c5\u02b8\3\2\2\2\u02c5\u02c4")
        buf.write("\3\2\2\2\u02c6\'\3\2\2\2\u02c7\u02d0\7\4\2\2\u02c8\u02cd")
        buf.write("\5r:\2\u02c9\u02ca\7\5\2\2\u02ca\u02cc\5r:\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2")
        buf.write("\u02d0\u02c8\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3")
        buf.write("\2\2\2\u02d2\u02d5\7\6\2\2\u02d3\u02d5\5r:\2\u02d4\u02c7")
        buf.write("\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5)\3\2\2\2\u02d6\u02d8")
        buf.write("\5t;\2\u02d7\u02d9\5<\37\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\7\17\2\2\u02db")
        buf.write("\u02dc\7\4\2\2\u02dc\u02dd\5\n\6\2\u02dd\u02de\7\6\2\2")
        buf.write("\u02de+\3\2\2\2\u02df\u02e0\t\t\2\2\u02e0-\3\2\2\2\u02e1")
        buf.write("\u02e6\5@!\2\u02e2\u02e4\7\17\2\2\u02e3\u02e2\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e7\5")
        buf.write("t;\2\u02e6\u02e3\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02ee")
        buf.write("\3\2\2\2\u02e8\u02e9\5r:\2\u02e9\u02ea\7\3\2\2\u02ea\u02eb")
        buf.write("\7\u00c2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ee\7\u00c2\2")
        buf.write("\2\u02ed\u02e1\3\2\2\2\u02ed\u02e8\3\2\2\2\u02ed\u02ec")
        buf.write("\3\2\2\2\u02ee/\3\2\2\2\u02ef\u02f0\b\31\1\2\u02f0\u02f1")
        buf.write("\5\66\34\2\u02f1\u0304\3\2\2\2\u02f2\u0300\f\4\2\2\u02f3")
        buf.write("\u02f4\7N\2\2\u02f4\u02f5\7M\2\2\u02f5\u0301\5\66\34\2")
        buf.write("\u02f6\u02f7\5\62\32\2\u02f7\u02f8\7M\2\2\u02f8\u02f9")
        buf.write("\5\60\31\2\u02f9\u02fa\5\64\33\2\u02fa\u0301\3\2\2\2\u02fb")
        buf.write("\u02fc\7T\2\2\u02fc\u02fd\5\62\32\2\u02fd\u02fe\7M\2\2")
        buf.write("\u02fe\u02ff\5\66\34\2\u02ff\u0301\3\2\2\2\u0300\u02f3")
        buf.write("\3\2\2\2\u0300\u02f6\3\2\2\2\u0300\u02fb\3\2\2\2\u0301")
        buf.write("\u0303\3\2\2\2\u0302\u02f2\3\2\2\2\u0303\u0306\3\2\2\2")
        buf.write("\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\61\3\2")
        buf.write("\2\2\u0306\u0304\3\2\2\2\u0307\u0309\7P\2\2\u0308\u0307")
        buf.write("\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u0317\3\2\2\2\u030a")
        buf.write("\u030c\7Q\2\2\u030b\u030d\7O\2\2\u030c\u030b\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u0317\3\2\2\2\u030e\u0310\7R\2\2")
        buf.write("\u030f\u0311\7O\2\2\u0310\u030f\3\2\2\2\u0310\u0311\3")
        buf.write("\2\2\2\u0311\u0317\3\2\2\2\u0312\u0314\7S\2\2\u0313\u0315")
        buf.write("\7O\2\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("\u0317\3\2\2\2\u0316\u0308\3\2\2\2\u0316\u030a\3\2\2\2")
        buf.write("\u0316\u030e\3\2\2\2\u0316\u0312\3\2\2\2\u0317\63\3\2")
        buf.write("\2\2\u0318\u0319\7V\2\2\u0319\u0327\5B\"\2\u031a\u031b")
        buf.write("\7U\2\2\u031b\u031c\7\4\2\2\u031c\u0321\5t;\2\u031d\u031e")
        buf.write("\7\5\2\2\u031e\u0320\5t;\2\u031f\u031d\3\2\2\2\u0320\u0323")
        buf.write("\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0324\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u0325\7\6\2\2")
        buf.write("\u0325\u0327\3\2\2\2\u0326\u0318\3\2\2\2\u0326\u031a\3")
        buf.write("\2\2\2\u0327\65\3\2\2\2\u0328\u032f\5:\36\2\u0329\u032a")
        buf.write("\7\u008e\2\2\u032a\u032b\58\35\2\u032b\u032c\7\4\2\2\u032c")
        buf.write("\u032d\5@!\2\u032d\u032e\7\6\2\2\u032e\u0330\3\2\2\2\u032f")
        buf.write("\u0329\3\2\2\2\u032f\u0330\3\2\2\2\u0330\67\3\2\2\2\u0331")
        buf.write("\u0332\t\n\2\2\u03329\3\2\2\2\u0333\u033b\5> \2\u0334")
        buf.write("\u0336\7\17\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2")
        buf.write("\2\u0336\u0337\3\2\2\2\u0337\u0339\5t;\2\u0338\u033a\5")
        buf.write("<\37\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c")
        buf.write("\3\2\2\2\u033b\u0335\3\2\2\2\u033b\u033c\3\2\2\2\u033c")
        buf.write(";\3\2\2\2\u033d\u033e\7\4\2\2\u033e\u0343\5t;\2\u033f")
        buf.write("\u0340\7\5\2\2\u0340\u0342\5t;\2\u0341\u033f\3\2\2\2\u0342")
        buf.write("\u0345\3\2\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u0346\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u0347\7")
        buf.write("\6\2\2\u0347=\3\2\2\2\u0348\u0361\5r:\2\u0349\u034a\7")
        buf.write("\4\2\2\u034a\u034b\5\n\6\2\u034b\u034c\7\6\2\2\u034c\u0361")
        buf.write("\3\2\2\2\u034d\u034e\7\u0091\2\2\u034e\u034f\7\4\2\2\u034f")
        buf.write("\u0354\5@!\2\u0350\u0351\7\5\2\2\u0351\u0353\5@!\2\u0352")
        buf.write("\u0350\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2")
        buf.write("\u0354\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0354\3")
        buf.write("\2\2\2\u0357\u035a\7\6\2\2\u0358\u0359\7a\2\2\u0359\u035b")
        buf.write("\7\u0092\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b")
        buf.write("\u0361\3\2\2\2\u035c\u035d\7\4\2\2\u035d\u035e\5\60\31")
        buf.write("\2\u035e\u035f\7\6\2\2\u035f\u0361\3\2\2\2\u0360\u0348")
        buf.write("\3\2\2\2\u0360\u0349\3\2\2\2\u0360\u034d\3\2\2\2\u0360")
        buf.write("\u035c\3\2\2\2\u0361?\3\2\2\2\u0362\u0363\5B\"\2\u0363")
        buf.write("A\3\2\2\2\u0364\u0365\b\"\1\2\u0365\u0369\5D#\2\u0366")
        buf.write("\u0367\7\"\2\2\u0367\u0369\5B\"\5\u0368\u0364\3\2\2\2")
        buf.write("\u0368\u0366\3\2\2\2\u0369\u0372\3\2\2\2\u036a\u036b\f")
        buf.write("\4\2\2\u036b\u036c\7 \2\2\u036c\u0371\5B\"\5\u036d\u036e")
        buf.write("\f\3\2\2\u036e\u036f\7\37\2\2\u036f\u0371\5B\"\4\u0370")
        buf.write("\u036a\3\2\2\2\u0370\u036d\3\2\2\2\u0371\u0374\3\2\2\2")
        buf.write("\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373C\3\2\2")
        buf.write("\2\u0374\u0372\3\2\2\2\u0375\u0377\5H%\2\u0376\u0378\5")
        buf.write("F$\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378E\3")
        buf.write("\2\2\2\u0379\u037a\5N(\2\u037a\u037b\5H%\2\u037b\u03b7")
        buf.write("\3\2\2\2\u037c\u037d\5N(\2\u037d\u037e\5P)\2\u037e\u037f")
        buf.write("\7\4\2\2\u037f\u0380\5\n\6\2\u0380\u0381\7\6\2\2\u0381")
        buf.write("\u03b7\3\2\2\2\u0382\u0384\7\"\2\2\u0383\u0382\3\2\2\2")
        buf.write("\u0383\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386\7")
        buf.write("%\2\2\u0386\u0387\5H%\2\u0387\u0388\7 \2\2\u0388\u0389")
        buf.write("\5H%\2\u0389\u03b7\3\2\2\2\u038a\u038c\7\"\2\2\u038b\u038a")
        buf.write("\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d\3\2\2\2\u038d")
        buf.write("\u038e\7!\2\2\u038e\u038f\7\4\2\2\u038f\u0394\5@!\2\u0390")
        buf.write("\u0391\7\5\2\2\u0391\u0393\5@!\2\u0392\u0390\3\2\2\2\u0393")
        buf.write("\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u0397\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u0398\7")
        buf.write("\6\2\2\u0398\u03b7\3\2\2\2\u0399\u039b\7\"\2\2\u039a\u0399")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write("\u039d\7!\2\2\u039d\u039e\7\4\2\2\u039e\u039f\5\n\6\2")
        buf.write("\u039f\u03a0\7\6\2\2\u03a0\u03b7\3\2\2\2\u03a1\u03a3\7")
        buf.write("\"\2\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4")
        buf.write("\3\2\2\2\u03a4\u03a5\7&\2\2\u03a5\u03a8\5H%\2\u03a6\u03a7")
        buf.write("\7.\2\2\u03a7\u03a9\5H%\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03b7\3\2\2\2\u03aa\u03ac\7\'\2\2\u03ab")
        buf.write("\u03ad\7\"\2\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2\2\2")
        buf.write("\u03ad\u03ae\3\2\2\2\u03ae\u03b7\7(\2\2\u03af\u03b1\7")
        buf.write("\'\2\2\u03b0\u03b2\7\"\2\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\7\23\2\2\u03b4")
        buf.write("\u03b5\7\r\2\2\u03b5\u03b7\5H%\2\u03b6\u0379\3\2\2\2\u03b6")
        buf.write("\u037c\3\2\2\2\u03b6\u0383\3\2\2\2\u03b6\u038b\3\2\2\2")
        buf.write("\u03b6\u039a\3\2\2\2\u03b6\u03a2\3\2\2\2\u03b6\u03aa\3")
        buf.write("\2\2\2\u03b6\u03af\3\2\2\2\u03b7G\3\2\2\2\u03b8\u03b9")
        buf.write("\b%\1\2\u03b9\u03bd\5J&\2\u03ba\u03bb\t\13\2\2\u03bb\u03bd")
        buf.write("\5H%\6\u03bc\u03b8\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03cc")
        buf.write("\3\2\2\2\u03be\u03bf\f\5\2\2\u03bf\u03c0\t\f\2\2\u03c0")
        buf.write("\u03cb\5H%\6\u03c1\u03c2\f\4\2\2\u03c2\u03c3\t\13\2\2")
        buf.write("\u03c3\u03cb\5H%\5\u03c4\u03c5\f\3\2\2\u03c5\u03c6\7\u00c5")
        buf.write("\2\2\u03c6\u03cb\5H%\4\u03c7\u03c8\f\7\2\2\u03c8\u03c9")
        buf.write("\7\36\2\2\u03c9\u03cb\5L\'\2\u03ca\u03be\3\2\2\2\u03ca")
        buf.write("\u03c1\3\2\2\2\u03ca\u03c4\3\2\2\2\u03ca\u03c7\3\2\2\2")
        buf.write("\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3")
        buf.write("\2\2\2\u03cdI\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d0")
        buf.write("\b&\1\2\u03d0\u049e\7(\2\2\u03d1\u049e\5T+\2\u03d2\u03d3")
        buf.write("\5t;\2\u03d3\u03d4\7\u00c6\2\2\u03d4\u049e\3\2\2\2\u03d5")
        buf.write("\u03d6\7\u00d0\2\2\u03d6\u049e\7\u00c6\2\2\u03d7\u049e")
        buf.write("\5x=\2\u03d8\u049e\5R*\2\u03d9\u049e\7\u00c6\2\2\u03da")
        buf.write("\u049e\7\u00c7\2\2\u03db\u049e\7\7\2\2\u03dc\u03dd\7\62")
        buf.write("\2\2\u03dd\u03de\7\4\2\2\u03de\u03df\5H%\2\u03df\u03e0")
        buf.write("\7!\2\2\u03e0\u03e1\5H%\2\u03e1\u03e2\7\6\2\2\u03e2\u049e")
        buf.write("\3\2\2\2\u03e3\u03e4\7\4\2\2\u03e4\u03e9\5@!\2\u03e5\u03e6")
        buf.write("\7\5\2\2\u03e6\u03e8\5@!\2\u03e7\u03e5\3\2\2\2\u03e8\u03eb")
        buf.write("\3\2\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea")
        buf.write("\u03ec\3\2\2\2\u03eb\u03e9\3\2\2\2\u03ec\u03ed\7\6\2\2")
        buf.write("\u03ed\u049e\3\2\2\2\u03ee\u03ef\7`\2\2\u03ef\u03f0\7")
        buf.write("\4\2\2\u03f0\u03f5\5@!\2\u03f1\u03f2\7\5\2\2\u03f2\u03f4")
        buf.write("\5@!\2\u03f3\u03f1\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f8\u03f9\7\6\2\2\u03f9\u049e\3\2\2\2")
        buf.write("\u03fa\u03fb\5r:\2\u03fb\u03fc\7\4\2\2\u03fc\u03fd\7\u00c2")
        buf.write("\2\2\u03fd\u03ff\7\6\2\2\u03fe\u0400\5`\61\2\u03ff\u03fe")
        buf.write("\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2\u0401")
        buf.write("\u0403\5b\62\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2")
        buf.write("\u0403\u049e\3\2\2\2\u0404\u0405\5r:\2\u0405\u0411\7\4")
        buf.write("\2\2\u0406\u0408\5,\27\2\u0407\u0406\3\2\2\2\u0407\u0408")
        buf.write("\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040e\5@!\2\u040a\u040b")
        buf.write("\7\5\2\2\u040b\u040d\5@!\2\u040c\u040a\3\2\2\2\u040d\u0410")
        buf.write("\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f")
        buf.write("\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0407\3\2\2\2")
        buf.write("\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\7")
        buf.write("\6\2\2\u0414\u0416\5`\61\2\u0415\u0414\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0419\5b\62\2\u0418")
        buf.write("\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u049e\3\2\2\2")
        buf.write("\u041a\u041b\5t;\2\u041b\u041c\7\b\2\2\u041c\u041d\5@")
        buf.write("!\2\u041d\u049e\3\2\2\2\u041e\u041f\7\4\2\2\u041f\u0424")
        buf.write("\5t;\2\u0420\u0421\7\5\2\2\u0421\u0423\5t;\2\u0422\u0420")
        buf.write("\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424")
        buf.write("\u0425\3\2\2\2\u0425\u0427\3\2\2\2\u0426\u0424\3\2\2\2")
        buf.write("\u0427\u0428\7\6\2\2\u0428\u0429\7\b\2\2\u0429\u042a\5")
        buf.write("@!\2\u042a\u049e\3\2\2\2\u042b\u042c\7\4\2\2\u042c\u042d")
        buf.write("\5\n\6\2\u042d\u042e\7\6\2\2\u042e\u049e\3\2\2\2\u042f")
        buf.write("\u0430\7$\2\2\u0430\u0431\7\4\2\2\u0431\u0432\5\n\6\2")
        buf.write("\u0432\u0433\7\6\2\2\u0433\u049e\3\2\2\2\u0434\u0435\7")
        buf.write("H\2\2\u0435\u0437\5H%\2\u0436\u0438\5^\60\2\u0437\u0436")
        buf.write("\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0437\3\2\2\2\u0439")
        buf.write("\u043a\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u043c\7K\2\2")
        buf.write("\u043c\u043e\5@!\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2")
        buf.write("\2\2\u043e\u043f\3\2\2\2\u043f\u0440\7L\2\2\u0440\u049e")
        buf.write("\3\2\2\2\u0441\u0443\7H\2\2\u0442\u0444\5^\60\2\u0443")
        buf.write("\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0443\3\2\2\2")
        buf.write("\u0445\u0446\3\2\2\2\u0446\u0449\3\2\2\2\u0447\u0448\7")
        buf.write("K\2\2\u0448\u044a\5@!\2\u0449\u0447\3\2\2\2\u0449\u044a")
        buf.write("\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\7L\2\2\u044c")
        buf.write("\u049e\3\2\2\2\u044d\u044e\7{\2\2\u044e\u044f\7\4\2\2")
        buf.write("\u044f\u0450\5@!\2\u0450\u0451\7\17\2\2\u0451\u0452\5")
        buf.write("X-\2\u0452\u0453\7\6\2\2\u0453\u049e\3\2\2\2\u0454\u0455")
        buf.write("\7|\2\2\u0455\u0456\7\4\2\2\u0456\u0457\5@!\2\u0457\u0458")
        buf.write("\7\17\2\2\u0458\u0459\5X-\2\u0459\u045a\7\6\2\2\u045a")
        buf.write("\u049e\3\2\2\2\u045b\u045c\7\u0093\2\2\u045c\u0465\7\t")
        buf.write("\2\2\u045d\u0462\5@!\2\u045e\u045f\7\5\2\2\u045f\u0461")
        buf.write("\5@!\2\u0460\u045e\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460")
        buf.write("\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0466\3\2\2\2\u0464")
        buf.write("\u0462\3\2\2\2\u0465\u045d\3\2\2\2\u0465\u0466\3\2\2\2")
        buf.write("\u0466\u0467\3\2\2\2\u0467\u049e\7\n\2\2\u0468\u049e\5")
        buf.write("t;\2\u0469\u049e\7B\2\2\u046a\u046e\7C\2\2\u046b\u046c")
        buf.write("\7\4\2\2\u046c\u046d\7\u00c8\2\2\u046d\u046f\7\6\2\2\u046e")
        buf.write("\u046b\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u049e\3\2\2\2")
        buf.write("\u0470\u0474\7D\2\2\u0471\u0472\7\4\2\2\u0472\u0473\7")
        buf.write("\u00c8\2\2\u0473\u0475\7\6\2\2\u0474\u0471\3\2\2\2\u0474")
        buf.write("\u0475\3\2\2\2\u0475\u049e\3\2\2\2\u0476\u047a\7E\2\2")
        buf.write("\u0477\u0478\7\4\2\2\u0478\u0479\7\u00c8\2\2\u0479\u047b")
        buf.write("\7\6\2\2\u047a\u0477\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u049e\3\2\2\2\u047c\u0480\7F\2\2\u047d\u047e\7\4\2\2")
        buf.write("\u047e\u047f\7\u00c8\2\2\u047f\u0481\7\6\2\2\u0480\u047d")
        buf.write("\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u049e\3\2\2\2\u0482")
        buf.write("\u0483\7\61\2\2\u0483\u0484\7\4\2\2\u0484\u0485\5H%\2")
        buf.write("\u0485\u0486\7\r\2\2\u0486\u0489\5H%\2\u0487\u0488\7\63")
        buf.write("\2\2\u0488\u048a\5H%\2\u0489\u0487\3\2\2\2\u0489\u048a")
        buf.write("\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c\7\6\2\2\u048c")
        buf.write("\u049e\3\2\2\2\u048d\u048e\7\u00b2\2\2\u048e\u048f\7\4")
        buf.write("\2\2\u048f\u0492\5H%\2\u0490\u0491\7\5\2\2\u0491\u0493")
        buf.write("\5|?\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494")
        buf.write("\3\2\2\2\u0494\u0495\7\6\2\2\u0495\u049e\3\2\2\2\u0496")
        buf.write("\u0497\7G\2\2\u0497\u0498\7\4\2\2\u0498\u0499\5t;\2\u0499")
        buf.write("\u049a\7\r\2\2\u049a\u049b\5H%\2\u049b\u049c\7\6\2\2\u049c")
        buf.write("\u049e\3\2\2\2\u049d\u03cf\3\2\2\2\u049d\u03d1\3\2\2\2")
        buf.write("\u049d\u03d2\3\2\2\2\u049d\u03d5\3\2\2\2\u049d\u03d7\3")
        buf.write("\2\2\2\u049d\u03d8\3\2\2\2\u049d\u03d9\3\2\2\2\u049d\u03da")
        buf.write("\3\2\2\2\u049d\u03db\3\2\2\2\u049d\u03dc\3\2\2\2\u049d")
        buf.write("\u03e3\3\2\2\2\u049d\u03ee\3\2\2\2\u049d\u03fa\3\2\2\2")
        buf.write("\u049d\u0404\3\2\2\2\u049d\u041a\3\2\2\2\u049d\u041e\3")
        buf.write("\2\2\2\u049d\u042b\3\2\2\2\u049d\u042f\3\2\2\2\u049d\u0434")
        buf.write("\3\2\2\2\u049d\u0441\3\2\2\2\u049d\u044d\3\2\2\2\u049d")
        buf.write("\u0454\3\2\2\2\u049d\u045b\3\2\2\2\u049d\u0468\3\2\2\2")
        buf.write("\u049d\u0469\3\2\2\2\u049d\u046a\3\2\2\2\u049d\u0470\3")
        buf.write("\2\2\2\u049d\u0476\3\2\2\2\u049d\u047c\3\2\2\2\u049d\u0482")
        buf.write("\3\2\2\2\u049d\u048d\3\2\2\2\u049d\u0496\3\2\2\2\u049e")
        buf.write("\u04a9\3\2\2\2\u049f\u04a0\f\r\2\2\u04a0\u04a1\7\t\2\2")
        buf.write("\u04a1\u04a2\5H%\2\u04a2\u04a3\7\n\2\2\u04a3\u04a8\3\2")
        buf.write("\2\2\u04a4\u04a5\f\13\2\2\u04a5\u04a6\7\3\2\2\u04a6\u04a8")
        buf.write("\5t;\2\u04a7\u049f\3\2\2\2\u04a7\u04a4\3\2\2\2\u04a8\u04ab")
        buf.write("\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa")
        buf.write("K\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ad\78\2\2\u04ad")
        buf.write("\u04ae\7A\2\2\u04ae\u04b3\5T+\2\u04af\u04b0\78\2\2\u04b0")
        buf.write("\u04b1\7A\2\2\u04b1\u04b3\7\u00c6\2\2\u04b2\u04ac\3\2")
        buf.write("\2\2\u04b2\u04af\3\2\2\2\u04b3M\3\2\2\2\u04b4\u04b5\t")
        buf.write("\r\2\2\u04b5O\3\2\2\2\u04b6\u04b7\t\16\2\2\u04b7Q\3\2")
        buf.write("\2\2\u04b8\u04b9\t\17\2\2\u04b9S\3\2\2\2\u04ba\u04bc\7")
        buf.write(":\2\2\u04bb\u04bd\t\13\2\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd")
        buf.write("\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04bf\7\u00c6\2\2\u04bf")
        buf.write("\u04c2\5V,\2\u04c0\u04c1\7\u008a\2\2\u04c1\u04c3\5V,\2")
        buf.write("\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3U\3\2\2")
        buf.write("\2\u04c4\u04c5\t\20\2\2\u04c5W\3\2\2\2\u04c6\u04c7\b-")
        buf.write("\1\2\u04c7\u04c8\7\u0093\2\2\u04c8\u04c9\7\u00bc\2\2\u04c9")
        buf.write("\u04ca\5X-\2\u04ca\u04cb\7\u00be\2\2\u04cb\u04f1\3\2\2")
        buf.write("\2\u04cc\u04cd\7\u0094\2\2\u04cd\u04ce\7\u00bc\2\2\u04ce")
        buf.write("\u04cf\5X-\2\u04cf\u04d0\7\5\2\2\u04d0\u04d1\5X-\2\u04d1")
        buf.write("\u04d2\7\u00be\2\2\u04d2\u04f1\3\2\2\2\u04d3\u04d4\7`")
        buf.write("\2\2\u04d4\u04d5\7\4\2\2\u04d5\u04d6\5t;\2\u04d6\u04dd")
        buf.write("\5X-\2\u04d7\u04d8\7\5\2\2\u04d8\u04d9\5t;\2\u04d9\u04da")
        buf.write("\5X-\2\u04da\u04dc\3\2\2\2\u04db\u04d7\3\2\2\2\u04dc\u04df")
        buf.write("\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de\3\2\2\2\u04de")
        buf.write("\u04e0\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e1\7\6\2\2")
        buf.write("\u04e1\u04f1\3\2\2\2\u04e2\u04ee\5\\/\2\u04e3\u04e4\7")
        buf.write("\4\2\2\u04e4\u04e9\5Z.\2\u04e5\u04e6\7\5\2\2\u04e6\u04e8")
        buf.write("\5Z.\2\u04e7\u04e5\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04e7")
        buf.write("\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb")
        buf.write("\u04e9\3\2\2\2\u04ec\u04ed\7\6\2\2\u04ed\u04ef\3\2\2\2")
        buf.write("\u04ee\u04e3\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\3")
        buf.write("\2\2\2\u04f0\u04c6\3\2\2\2\u04f0\u04cc\3\2\2\2\u04f0\u04d3")
        buf.write("\3\2\2\2\u04f0\u04e2\3\2\2\2\u04f1\u04f6\3\2\2\2\u04f2")
        buf.write("\u04f3\f\7\2\2\u04f3\u04f5\7\u0093\2\2\u04f4\u04f2\3\2")
        buf.write("\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f7")
        buf.write("\3\2\2\2\u04f7Y\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f9\u04fc")
        buf.write("\7\u00c8\2\2\u04fa\u04fc\5X-\2\u04fb\u04f9\3\2\2\2\u04fb")
        buf.write("\u04fa\3\2\2\2\u04fc[\3\2\2\2\u04fd\u0502\7\u00ce\2\2")
        buf.write("\u04fe\u0502\7\u00cf\2\2\u04ff\u0502\7\u00d0\2\2\u0500")
        buf.write("\u0502\5t;\2\u0501\u04fd\3\2\2\2\u0501\u04fe\3\2\2\2\u0501")
        buf.write("\u04ff\3\2\2\2\u0501\u0500\3\2\2\2\u0502]\3\2\2\2\u0503")
        buf.write("\u0504\7I\2\2\u0504\u0505\5@!\2\u0505\u0506\7J\2\2\u0506")
        buf.write("\u0507\5@!\2\u0507_\3\2\2\2\u0508\u0509\7W\2\2\u0509\u050a")
        buf.write("\7\4\2\2\u050a\u050b\7\24\2\2\u050b\u050c\5B\"\2\u050c")
        buf.write("\u050d\7\6\2\2\u050da\3\2\2\2\u050e\u050f\7X\2\2\u050f")
        buf.write("\u051a\7\4\2\2\u0510\u0511\7Y\2\2\u0511\u0512\7\26\2\2")
        buf.write("\u0512\u0517\5@!\2\u0513\u0514\7\5\2\2\u0514\u0516\5@")
        buf.write("!\2\u0515\u0513\3\2\2\2\u0516\u0519\3\2\2\2\u0517\u0515")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u051b\3\2\2\2\u0519")
        buf.write("\u0517\3\2\2\2\u051a\u0510\3\2\2\2\u051a\u051b\3\2\2\2")
        buf.write("\u051b\u0526\3\2\2\2\u051c\u051d\7\33\2\2\u051d\u051e")
        buf.write("\7\26\2\2\u051e\u0523\5\36\20\2\u051f\u0520\7\5\2\2\u0520")
        buf.write("\u0522\5\36\20\2\u0521\u051f\3\2\2\2\u0522\u0525\3\2\2")
        buf.write("\2\u0523\u0521\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0527")
        buf.write("\3\2\2\2\u0525\u0523\3\2\2\2\u0526\u051c\3\2\2\2\u0526")
        buf.write("\u0527\3\2\2\2\u0527\u0529\3\2\2\2\u0528\u052a\5d\63\2")
        buf.write("\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052b\3")
        buf.write("\2\2\2\u052b\u052c\7\6\2\2\u052cc\3\2\2\2\u052d\u052e")
        buf.write("\7Z\2\2\u052e\u053e\5f\64\2\u052f\u0530\7[\2\2\u0530\u053e")
        buf.write("\5f\64\2\u0531\u0532\7Z\2\2\u0532\u0533\7%\2\2\u0533\u0534")
        buf.write("\5f\64\2\u0534\u0535\7 \2\2\u0535\u0536\5f\64\2\u0536")
        buf.write("\u053e\3\2\2\2\u0537\u0538\7[\2\2\u0538\u0539\7%\2\2\u0539")
        buf.write("\u053a\5f\64\2\u053a\u053b\7 \2\2\u053b\u053c\5f\64\2")
        buf.write("\u053c\u053e\3\2\2\2\u053d\u052d\3\2\2\2\u053d\u052f\3")
        buf.write("\2\2\2\u053d\u0531\3\2\2\2\u053d\u0537\3\2\2\2\u053ee")
        buf.write("\3\2\2\2\u053f\u0540\7\\\2\2\u0540\u0549\7]\2\2\u0541")
        buf.write("\u0542\7\\\2\2\u0542\u0549\7^\2\2\u0543\u0544\7_\2\2\u0544")
        buf.write("\u0549\7`\2\2\u0545\u0546\5@!\2\u0546\u0547\t\21\2\2\u0547")
        buf.write("\u0549\3\2\2\2\u0548\u053f\3\2\2\2\u0548\u0541\3\2\2\2")
        buf.write("\u0548\u0543\3\2\2\2\u0548\u0545\3\2\2\2\u0549g\3\2\2")
        buf.write("\2\u054a\u054b\7u\2\2\u054b\u054f\t\22\2\2\u054c\u054d")
        buf.write("\7v\2\2\u054d\u054f\t\23\2\2\u054e\u054a\3\2\2\2\u054e")
        buf.write("\u054c\3\2\2\2\u054fi\3\2\2\2\u0550\u0551\7\u009e\2\2")
        buf.write("\u0551\u0552\7\u009f\2\2\u0552\u0556\5l\67\2\u0553\u0554")
        buf.write("\7\u00a4\2\2\u0554\u0556\t\24\2\2\u0555\u0550\3\2\2\2")
        buf.write("\u0555\u0553\3\2\2\2\u0556k\3\2\2\2\u0557\u0558\7\u00a4")
        buf.write("\2\2\u0558\u055f\7\u00a3\2\2\u0559\u055a\7\u00a4\2\2\u055a")
        buf.write("\u055f\7\u00a2\2\2\u055b\u055c\7\u00a1\2\2\u055c\u055f")
        buf.write("\7\u00a4\2\2\u055d\u055f\7\u00a0\2\2\u055e\u0557\3\2\2")
        buf.write("\2\u055e\u0559\3\2\2\2\u055e\u055b\3\2\2\2\u055e\u055d")
        buf.write("\3\2\2\2\u055fm\3\2\2\2\u0560\u0566\5@!\2\u0561\u0562")
        buf.write("\5t;\2\u0562\u0563\7\13\2\2\u0563\u0564\5@!\2\u0564\u0566")
        buf.write("\3\2\2\2\u0565\u0560\3\2\2\2\u0565\u0561\3\2\2\2\u0566")
        buf.write("o\3\2\2\2\u0567\u056c\7\f\2\2\u0568\u056c\7j\2\2\u0569")
        buf.write("\u056c\7i\2\2\u056a\u056c\5t;\2\u056b\u0567\3\2\2\2\u056b")
        buf.write("\u0568\3\2\2\2\u056b\u0569\3\2\2\2\u056b\u056a\3\2\2\2")
        buf.write("\u056cq\3\2\2\2\u056d\u0572\5t;\2\u056e\u056f\7\3\2\2")
        buf.write("\u056f\u0571\5t;\2\u0570\u056e\3\2\2\2\u0571\u0574\3\2")
        buf.write("\2\2\u0572\u0570\3\2\2\2\u0572\u0573\3\2\2\2\u0573s\3")
        buf.write("\2\2\2\u0574\u0572\3\2\2\2\u0575\u057b\7\u00ca\2\2\u0576")
        buf.write("\u057b\5v<\2\u0577\u057b\5z>\2\u0578\u057b\7\u00cd\2\2")
        buf.write("\u0579\u057b\7\u00cb\2\2\u057a\u0575\3\2\2\2\u057a\u0576")
        buf.write("\3\2\2\2\u057a\u0577\3\2\2\2\u057a\u0578\3\2\2\2\u057a")
        buf.write("\u0579\3\2\2\2\u057bu\3\2\2\2\u057c\u057d\7\u00cc\2\2")
        buf.write("\u057dw\3\2\2\2\u057e\u0581\7\u00c9\2\2\u057f\u0581\7")
        buf.write("\u00c8\2\2\u0580\u057e\3\2\2\2\u0580\u057f\3\2\2\2\u0581")
        buf.write("y\3\2\2\2\u0582\u05dc\7}\2\2\u0583\u05dc\7~\2\2\u0584")
        buf.write("\u05dc\7\u0081\2\2\u0585\u05dc\7\u0082\2\2\u0586\u05dc")
        buf.write("\7\u0084\2\2\u0587\u05dc\7\u0085\2\2\u0588\u05dc\7\177")
        buf.write("\2\2\u0589\u05dc\7\u0080\2\2\u058a\u05dc\7\u0097\2\2\u058b")
        buf.write("\u05dc\7\16\2\2\u058c\u05dc\7W\2\2\u058d\u05dc\7X\2\2")
        buf.write("\u058e\u05dc\7Y\2\2\u058f\u05dc\7Z\2\2\u0590\u05dc\7[")
        buf.write("\2\2\u0591\u05dc\7]\2\2\u0592\u05dc\7^\2\2\u0593\u05dc")
        buf.write("\7_\2\2\u0594\u05dc\7`\2\2\u0595\u05dc\7\u0094\2\2\u0596")
        buf.write("\u05dc\7\u0093\2\2\u0597\u05dc\7\64\2\2\u0598\u05dc\7")
        buf.write("\65\2\2\u0599\u05dc\7\66\2\2\u059a\u05dc\7\67\2\2\u059b")
        buf.write("\u05dc\78\2\2\u059c\u05dc\79\2\2\u059d\u05dc\7:\2\2\u059e")
        buf.write("\u05dc\7A\2\2\u059f\u05dc\7;\2\2\u05a0\u05dc\7<\2\2\u05a1")
        buf.write("\u05dc\7=\2\2\u05a2\u05dc\7>\2\2\u05a3\u05dc\7?\2\2\u05a4")
        buf.write("\u05dc\7@\2\2\u05a5\u05dc\7s\2\2\u05a6\u05dc\7t\2\2\u05a7")
        buf.write("\u05dc\7u\2\2\u05a8\u05dc\7v\2\2\u05a9\u05dc\7w\2\2\u05aa")
        buf.write("\u05dc\7x\2\2\u05ab\u05dc\7y\2\2\u05ac\u05dc\7z\2\2\u05ad")
        buf.write("\u05dc\7\u008e\2\2\u05ae\u05dc\7\u008b\2\2\u05af\u05dc")
        buf.write("\7\u008c\2\2\u05b0\u05dc\7\u008d\2\2\u05b1\u05dc\7\u0083")
        buf.write("\2\2\u05b2\u05dc\7\u008a\2\2\u05b3\u05dc\7\u0095\2\2\u05b4")
        buf.write("\u05dc\7\u0096\2\2\u05b5\u05dc\7g\2\2\u05b6\u05dc\7h\2")
        buf.write("\2\u05b7\u05dc\7\u00b7\2\2\u05b8\u05dc\7\u00b8\2\2\u05b9")
        buf.write("\u05dc\7\u00b9\2\2\u05ba\u05dc\5|?\2\u05bb\u05dc\7\62")
        buf.write("\2\2\u05bc\u05dc\7#\2\2\u05bd\u05dc\7\u0098\2\2\u05be")
        buf.write("\u05dc\7\u0099\2\2\u05bf\u05dc\7\u009a\2\2\u05c0\u05dc")
        buf.write("\7\u009b\2\2\u05c1\u05dc\7\u009c\2\2\u05c2\u05dc\7\u009d")
        buf.write("\2\2\u05c3\u05dc\7\u009e\2\2\u05c4\u05dc\7\u009f\2\2\u05c5")
        buf.write("\u05dc\7\u00a0\2\2\u05c6\u05dc\7\u00a1\2\2\u05c7\u05dc")
        buf.write("\7\u00a2\2\2\u05c8\u05dc\7\u00a3\2\2\u05c9\u05dc\7\u00a4")
        buf.write("\2\2\u05ca\u05dc\7\u00a5\2\2\u05cb\u05dc\7\u00a6\2\2\u05cc")
        buf.write("\u05dc\7\u00a7\2\2\u05cd\u05dc\7n\2\2\u05ce\u05dc\7o\2")
        buf.write("\2\u05cf\u05dc\7p\2\2\u05d0\u05dc\7q\2\2\u05d1\u05dc\7")
        buf.write("r\2\2\u05d2\u05dc\7\61\2\2\u05d3\u05dc\7e\2\2\u05d4\u05dc")
        buf.write("\7\u00ad\2\2\u05d5\u05dc\7\u00ae\2\2\u05d6\u05dc\7\u00ab")
        buf.write("\2\2\u05d7\u05dc\7\u00ac\2\2\u05d8\u05dc\7\u00af\2\2\u05d9")
        buf.write("\u05dc\7\u00b0\2\2\u05da\u05dc\7\u00b1\2\2\u05db\u0582")
        buf.write("\3\2\2\2\u05db\u0583\3\2\2\2\u05db\u0584\3\2\2\2\u05db")
        buf.write("\u0585\3\2\2\2\u05db\u0586\3\2\2\2\u05db\u0587\3\2\2\2")
        buf.write("\u05db\u0588\3\2\2\2\u05db\u0589\3\2\2\2\u05db\u058a\3")
        buf.write("\2\2\2\u05db\u058b\3\2\2\2\u05db\u058c\3\2\2\2\u05db\u058d")
        buf.write("\3\2\2\2\u05db\u058e\3\2\2\2\u05db\u058f\3\2\2\2\u05db")
        buf.write("\u0590\3\2\2\2\u05db\u0591\3\2\2\2\u05db\u0592\3\2\2\2")
        buf.write("\u05db\u0593\3\2\2\2\u05db\u0594\3\2\2\2\u05db\u0595\3")
        buf.write("\2\2\2\u05db\u0596\3\2\2\2\u05db\u0597\3\2\2\2\u05db\u0598")
        buf.write("\3\2\2\2\u05db\u0599\3\2\2\2\u05db\u059a\3\2\2\2\u05db")
        buf.write("\u059b\3\2\2\2\u05db\u059c\3\2\2\2\u05db\u059d\3\2\2\2")
        buf.write("\u05db\u059e\3\2\2\2\u05db\u059f\3\2\2\2\u05db\u05a0\3")
        buf.write("\2\2\2\u05db\u05a1\3\2\2\2\u05db\u05a2\3\2\2\2\u05db\u05a3")
        buf.write("\3\2\2\2\u05db\u05a4\3\2\2\2\u05db\u05a5\3\2\2\2\u05db")
        buf.write("\u05a6\3\2\2\2\u05db\u05a7\3\2\2\2\u05db\u05a8\3\2\2\2")
        buf.write("\u05db\u05a9\3\2\2\2\u05db\u05aa\3\2\2\2\u05db\u05ab\3")
        buf.write("\2\2\2\u05db\u05ac\3\2\2\2\u05db\u05ad\3\2\2\2\u05db\u05ae")
        buf.write("\3\2\2\2\u05db\u05af\3\2\2\2\u05db\u05b0\3\2\2\2\u05db")
        buf.write("\u05b1\3\2\2\2\u05db\u05b2\3\2\2\2\u05db\u05b3\3\2\2\2")
        buf.write("\u05db\u05b4\3\2\2\2\u05db\u05b5\3\2\2\2\u05db\u05b6\3")
        buf.write("\2\2\2\u05db\u05b7\3\2\2\2\u05db\u05b8\3\2\2\2\u05db\u05b9")
        buf.write("\3\2\2\2\u05db\u05ba\3\2\2\2\u05db\u05bb\3\2\2\2\u05db")
        buf.write("\u05bc\3\2\2\2\u05db\u05bd\3\2\2\2\u05db\u05be\3\2\2\2")
        buf.write("\u05db\u05bf\3\2\2\2\u05db\u05c0\3\2\2\2\u05db\u05c1\3")
        buf.write("\2\2\2\u05db\u05c2\3\2\2\2\u05db\u05c3\3\2\2\2\u05db\u05c4")
        buf.write("\3\2\2\2\u05db\u05c5\3\2\2\2\u05db\u05c6\3\2\2\2\u05db")
        buf.write("\u05c7\3\2\2\2\u05db\u05c8\3\2\2\2\u05db\u05c9\3\2\2\2")
        buf.write("\u05db\u05ca\3\2\2\2\u05db\u05cb\3\2\2\2\u05db\u05cc\3")
        buf.write("\2\2\2\u05db\u05cd\3\2\2\2\u05db\u05ce\3\2\2\2\u05db\u05cf")
        buf.write("\3\2\2\2\u05db\u05d0\3\2\2\2\u05db\u05d1\3\2\2\2\u05db")
        buf.write("\u05d2\3\2\2\2\u05db\u05d3\3\2\2\2\u05db\u05d4\3\2\2\2")
        buf.write("\u05db\u05d5\3\2\2\2\u05db\u05d6\3\2\2\2\u05db\u05d7\3")
        buf.write("\2\2\2\u05db\u05d8\3\2\2\2\u05db\u05d9\3\2\2\2\u05db\u05da")
        buf.write("\3\2\2\2\u05dc{\3\2\2\2\u05dd\u05de\t\25\2\2\u05de}\3")
        buf.write("\2\2\2\u00af\u0083\u0087\u009e\u00a3\u00a9\u00ad\u00bb")
        buf.write("\u00c0\u00c6\u00c9\u00d0\u00d9\u00df\u00e5\u00ec\u00f5")
        buf.write("\u0111\u011c\u0127\u012a\u0134\u0139\u013d\u0145\u014b")
        buf.write("\u0152\u0157\u015b\u0163\u016b\u0170\u017f\u0183\u0189")
        buf.write("\u018d\u0193\u01b1\u01b4\u01b8\u01bc\u01c4\u01cd\u01d0")
        buf.write("\u01d4\u01e6\u01e9\u01f1\u01f4\u01fa\u0201\u0206\u020f")
        buf.write("\u0217\u0228\u022b\u022f\u0237\u023d\u0240\u0242\u024e")
        buf.write("\u0255\u0259\u025d\u0261\u0268\u0271\u0274\u0278\u027d")
        buf.write("\u0281\u0284\u028b\u0296\u0299\u02a3\u02a6\u02b1\u02b6")
        buf.write("\u02be\u02c1\u02c5\u02cd\u02d0\u02d4\u02d8\u02e3\u02e6")
        buf.write("\u02ed\u0300\u0304\u0308\u030c\u0310\u0314\u0316\u0321")
        buf.write("\u0326\u032f\u0335\u0339\u033b\u0343\u0354\u035a\u0360")
        buf.write("\u0368\u0370\u0372\u0377\u0383\u038b\u0394\u039a\u03a2")
        buf.write("\u03a8\u03ac\u03b1\u03b6\u03bc\u03ca\u03cc\u03e9\u03f5")
        buf.write("\u03ff\u0402\u0407\u040e\u0411\u0415\u0418\u0424\u0439")
        buf.write("\u043d\u0445\u0449\u0462\u0465\u046e\u0474\u047a\u0480")
        buf.write("\u0489\u0492\u049d\u04a7\u04a9\u04b2\u04bc\u04c2\u04dd")
        buf.write("\u04e9\u04ee\u04f0\u04f6\u04fb\u0501\u0517\u051a\u0523")
        buf.write("\u0526\u0529\u053d\u0548\u054e\u0555\u055e\u0565\u056b")
        buf.write("\u0572\u057a\u0580\u05db")
        return buf.getvalue()


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "','", "')'", "'?'", "'->'", 
                     "'['", "']'", "'=>'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "<INVALID>", 
                     "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'||'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "SELECT", "FROM_", "ADD", 
                      "AS_", "ALL", "SOME", "ANY", "DISTINCT", "WHERE", 
                      "GROUP", "BY", "GROUPING", "SETS", "CUBE", "ROLLUP", 
                      "ORDER", "HAVING", "LIMIT", "AT", "OR", "AND", "IN", 
                      "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "IS", "NULL", 
                      "TRUE", "FALSE", "NULLS", "FIRST", "LAST", "ESCAPE", 
                      "ASC", "DESC", "SUBSTRING", "POSITION", "FOR", "TINYINT", 
                      "SMALLINT", "INTEGER", "DATE", "TIME", "TIMESTAMP", 
                      "INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", 
                      "SECOND", "ZONE", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", 
                      "EXTRACT", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "RIGHT", 
                      "FULL", "NATURAL", "USING", "ON", "FILTER_", "OVER", 
                      "PARTITION", "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", 
                      "FOLLOWING", "CURRENT", "ROW", "WITH", "RECURSIVE", 
                      "VALUES", "CREATE", "SCHEMA", "TABLE", "VIEW", "REPLACE", 
                      "INSERT", "DELETE", "INTO", "CONSTRAINT", "DESCRIBE", 
                      "GRANT", "REVOKE", "PRIVILEGES", "PUBLIC", "OPTION", 
                      "EXPLAIN", "ANALYZE", "FORMAT", "TYPE", "TEXT", "GRAPHVIZ", 
                      "LOGICAL", "DISTRIBUTED", "CAST", "TRY_CAST", "SHOW", 
                      "TABLES", "SCHEMAS", "CATALOGS", "COLUMNS", "COLUMN", 
                      "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", 
                      "EXCEPT", "INTERSECT", "TO", "SYSTEM", "BERNOULLI", 
                      "POISSONIZED", "TABLESAMPLE", "ALTER", "RENAME", "UNNEST", 
                      "ORDINALITY", "ARRAY", "MAP", "SET", "RESET", "SESSION", 
                      "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", 
                      "WORK", "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", 
                      "COMMITTED", "UNCOMMITTED", "READ", "WRITE", "ONLY", 
                      "CALL", "PREPARE", "DEALLOCATE", "EXECUTE", "INPUT", 
                      "OUTPUT", "CASCADE", "RESTRICT", "INCLUDING", "EXCLUDING", 
                      "PROPERTIES", "NORMALIZE", "NFD", "NFC", "NFKD", "NFKC", 
                      "IF", "NULLIF", "COALESCE", "EQ", "NEQ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "CONCAT", "STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", 
                      "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "SEMICOLON", "UNRECOGNIZED", 
                      "DELIMITER" ]

    RULE_multiStatement = 0
    RULE_singleStatement = 1
    RULE_singleExpression = 2
    RULE_statement = 3
    RULE_query = 4
    RULE_presto_with = 5
    RULE_tableElement = 6
    RULE_columnDefinition = 7
    RULE_likeClause = 8
    RULE_tableProperties = 9
    RULE_tableProperty = 10
    RULE_queryNoWith = 11
    RULE_queryTerm = 12
    RULE_queryPrimary = 13
    RULE_sortItem = 14
    RULE_querySpecification = 15
    RULE_groupBy = 16
    RULE_groupingElement = 17
    RULE_groupingExpressions = 18
    RULE_groupingSet = 19
    RULE_namedQuery = 20
    RULE_setQuantifier = 21
    RULE_selectItem = 22
    RULE_relation = 23
    RULE_joinType = 24
    RULE_joinCriteria = 25
    RULE_sampledRelation = 26
    RULE_sampleType = 27
    RULE_aliasedRelation = 28
    RULE_columnAliases = 29
    RULE_relationPrimary = 30
    RULE_expression = 31
    RULE_booleanExpression = 32
    RULE_predicated = 33
    RULE_predicate = 34
    RULE_valueExpression = 35
    RULE_primaryExpression = 36
    RULE_timeZoneSpecifier = 37
    RULE_comparisonOperator = 38
    RULE_comparisonQuantifier = 39
    RULE_booleanValue = 40
    RULE_interval = 41
    RULE_intervalField = 42
    RULE_type_ = 43
    RULE_typeParameter = 44
    RULE_baseType = 45
    RULE_whenClause = 46
    RULE_filter_ = 47
    RULE_over = 48
    RULE_windowFrame = 49
    RULE_frameBound = 50
    RULE_explainOption = 51
    RULE_transactionMode = 52
    RULE_levelOfIsolation = 53
    RULE_callArgument = 54
    RULE_privilege = 55
    RULE_qualifiedName = 56
    RULE_identifier = 57
    RULE_quotedIdentifier = 58
    RULE_number = 59
    RULE_nonReserved = 60
    RULE_normalForm = 61

    ruleNames =  [ "multiStatement", "singleStatement", "singleExpression", 
                   "statement", "query", "presto_with", "tableElement", 
                   "columnDefinition", "likeClause", "tableProperties", 
                   "tableProperty", "queryNoWith", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "groupBy", "groupingElement", 
                   "groupingExpressions", "groupingSet", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "aliasedRelation", "columnAliases", 
                   "relationPrimary", "expression", "booleanExpression", 
                   "predicated", "predicate", "valueExpression", "primaryExpression", 
                   "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
                   "booleanValue", "interval", "intervalField", "type_", 
                   "typeParameter", "baseType", "whenClause", "filter_", 
                   "over", "windowFrame", "frameBound", "explainOption", 
                   "transactionMode", "levelOfIsolation", "callArgument", 
                   "privilege", "qualifiedName", "identifier", "quotedIdentifier", 
                   "number", "nonReserved", "normalForm" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    SELECT=10
    FROM_=11
    ADD=12
    AS_=13
    ALL=14
    SOME=15
    ANY=16
    DISTINCT=17
    WHERE=18
    GROUP=19
    BY=20
    GROUPING=21
    SETS=22
    CUBE=23
    ROLLUP=24
    ORDER=25
    HAVING=26
    LIMIT=27
    AT=28
    OR=29
    AND=30
    IN=31
    NOT=32
    NO=33
    EXISTS=34
    BETWEEN=35
    LIKE=36
    IS=37
    NULL=38
    TRUE=39
    FALSE=40
    NULLS=41
    FIRST=42
    LAST=43
    ESCAPE=44
    ASC=45
    DESC=46
    SUBSTRING=47
    POSITION=48
    FOR=49
    TINYINT=50
    SMALLINT=51
    INTEGER=52
    DATE=53
    TIME=54
    TIMESTAMP=55
    INTERVAL=56
    YEAR=57
    MONTH=58
    DAY=59
    HOUR=60
    MINUTE=61
    SECOND=62
    ZONE=63
    CURRENT_DATE=64
    CURRENT_TIME=65
    CURRENT_TIMESTAMP=66
    LOCALTIME=67
    LOCALTIMESTAMP=68
    EXTRACT=69
    CASE=70
    WHEN=71
    THEN=72
    ELSE=73
    END=74
    JOIN=75
    CROSS=76
    OUTER=77
    INNER=78
    LEFT=79
    RIGHT=80
    FULL=81
    NATURAL=82
    USING=83
    ON=84
    FILTER_=85
    OVER=86
    PARTITION=87
    RANGE=88
    ROWS=89
    UNBOUNDED=90
    PRECEDING=91
    FOLLOWING=92
    CURRENT=93
    ROW=94
    WITH=95
    RECURSIVE=96
    VALUES=97
    CREATE=98
    SCHEMA=99
    TABLE=100
    VIEW=101
    REPLACE=102
    INSERT=103
    DELETE=104
    INTO=105
    CONSTRAINT=106
    DESCRIBE=107
    GRANT=108
    REVOKE=109
    PRIVILEGES=110
    PUBLIC=111
    OPTION=112
    EXPLAIN=113
    ANALYZE=114
    FORMAT=115
    TYPE=116
    TEXT=117
    GRAPHVIZ=118
    LOGICAL=119
    DISTRIBUTED=120
    CAST=121
    TRY_CAST=122
    SHOW=123
    TABLES=124
    SCHEMAS=125
    CATALOGS=126
    COLUMNS=127
    COLUMN=128
    USE=129
    PARTITIONS=130
    FUNCTIONS=131
    DROP=132
    UNION=133
    EXCEPT=134
    INTERSECT=135
    TO=136
    SYSTEM=137
    BERNOULLI=138
    POISSONIZED=139
    TABLESAMPLE=140
    ALTER=141
    RENAME=142
    UNNEST=143
    ORDINALITY=144
    ARRAY=145
    MAP=146
    SET=147
    RESET=148
    SESSION=149
    DATA=150
    START=151
    TRANSACTION=152
    COMMIT=153
    ROLLBACK=154
    WORK=155
    ISOLATION=156
    LEVEL=157
    SERIALIZABLE=158
    REPEATABLE=159
    COMMITTED=160
    UNCOMMITTED=161
    READ=162
    WRITE=163
    ONLY=164
    CALL=165
    PREPARE=166
    DEALLOCATE=167
    EXECUTE=168
    INPUT=169
    OUTPUT=170
    CASCADE=171
    RESTRICT=172
    INCLUDING=173
    EXCLUDING=174
    PROPERTIES=175
    NORMALIZE=176
    NFD=177
    NFC=178
    NFKD=179
    NFKC=180
    IF=181
    NULLIF=182
    COALESCE=183
    EQ=184
    NEQ=185
    LT=186
    LTE=187
    GT=188
    GTE=189
    PLUS=190
    MINUS=191
    ASTERISK=192
    SLASH=193
    PERCENT=194
    CONCAT=195
    STRING=196
    BINARY_LITERAL=197
    INTEGER_VALUE=198
    DECIMAL_VALUE=199
    IDENTIFIER=200
    DIGIT_IDENTIFIER=201
    QUOTED_IDENTIFIER=202
    BACKQUOTED_IDENTIFIER=203
    TIME_WITH_TIME_ZONE=204
    TIMESTAMP_WITH_TIME_ZONE=205
    DOUBLE_PRECISION=206
    SIMPLE_COMMENT=207
    BRACKETED_COMMENT=208
    WS=209
    SEMICOLON=210
    UNRECOGNIZED=211
    DELIMITER=212

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MultiStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StatementContext,i)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStatement" ):
                listener.enterMultiStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStatement" ):
                listener.exitMultiStatement(self)




    def multiStatement(self):

        localctx = SqlBaseParser.MultiStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_multiStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 124
            self.statement()
            self.state = 129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 125
                    self.match(SqlBaseParser.SEMICOLON)
                    self.state = 126
                    self.statement() 
                self.state = 131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SEMICOLON:
                self.state = 132
                self.match(SqlBaseParser.SEMICOLON)


            self.state = 135
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self.statement()
            self.state = 138
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140
            self.expression()
            self.state = 141
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def tableProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def tableProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertiesContext,0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # IdentifierContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.limit = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def tableProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # IdentifierContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.GRANT)
            else:
                return self.getToken(SqlBaseParser.GRANT, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 143
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 144
                self.match(SqlBaseParser.USE)
                self.state = 145
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 146
                self.match(SqlBaseParser.USE)
                self.state = 147
                localctx.catalog = self.identifier()
                self.state = 148
                self.match(SqlBaseParser.T__0)
                self.state = 149
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.match(SqlBaseParser.CREATE)
                self.state = 152
                self.match(SqlBaseParser.SCHEMA)
                self.state = 156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 153
                    self.match(SqlBaseParser.IF)
                    self.state = 154
                    self.match(SqlBaseParser.NOT)
                    self.state = 155
                    self.match(SqlBaseParser.EXISTS)


                self.state = 158
                self.qualifiedName()
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 159
                    self.match(SqlBaseParser.WITH)
                    self.state = 160
                    self.tableProperties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 163
                self.match(SqlBaseParser.DROP)
                self.state = 164
                self.match(SqlBaseParser.SCHEMA)
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 165
                    self.match(SqlBaseParser.IF)
                    self.state = 166
                    self.match(SqlBaseParser.EXISTS)


                self.state = 169
                self.qualifiedName()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 170
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 173
                self.match(SqlBaseParser.ALTER)
                self.state = 174
                self.match(SqlBaseParser.SCHEMA)
                self.state = 175
                self.qualifiedName()
                self.state = 176
                self.match(SqlBaseParser.RENAME)
                self.state = 177
                self.match(SqlBaseParser.TO)
                self.state = 178
                self.identifier()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 180
                self.match(SqlBaseParser.CREATE)
                self.state = 181
                self.match(SqlBaseParser.TABLE)
                self.state = 185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.match(SqlBaseParser.IF)
                    self.state = 183
                    self.match(SqlBaseParser.NOT)
                    self.state = 184
                    self.match(SqlBaseParser.EXISTS)


                self.state = 187
                self.qualifiedName()
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 188
                    self.match(SqlBaseParser.WITH)
                    self.state = 189
                    self.tableProperties()


                self.state = 192
                self.match(SqlBaseParser.AS_)
                self.state = 193
                self.query()
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 194
                    self.match(SqlBaseParser.WITH)
                    self.state = 196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.NO:
                        self.state = 195
                        self.match(SqlBaseParser.NO)


                    self.state = 198
                    self.match(SqlBaseParser.DATA)


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 201
                self.match(SqlBaseParser.CREATE)
                self.state = 202
                self.match(SqlBaseParser.TABLE)
                self.state = 206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 203
                    self.match(SqlBaseParser.IF)
                    self.state = 204
                    self.match(SqlBaseParser.NOT)
                    self.state = 205
                    self.match(SqlBaseParser.EXISTS)


                self.state = 208
                self.qualifiedName()
                self.state = 209
                self.match(SqlBaseParser.T__1)
                self.state = 210
                self.tableElement()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 211
                    self.match(SqlBaseParser.T__2)
                    self.state = 212
                    self.tableElement()
                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 218
                self.match(SqlBaseParser.T__3)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 219
                    self.match(SqlBaseParser.WITH)
                    self.state = 220
                    self.tableProperties()


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 223
                self.match(SqlBaseParser.DROP)
                self.state = 224
                self.match(SqlBaseParser.TABLE)
                self.state = 227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 225
                    self.match(SqlBaseParser.IF)
                    self.state = 226
                    self.match(SqlBaseParser.EXISTS)


                self.state = 229
                self.qualifiedName()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 230
                self.match(SqlBaseParser.INSERT)
                self.state = 231
                self.match(SqlBaseParser.INTO)
                self.state = 232
                self.qualifiedName()
                self.state = 234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 233
                    self.columnAliases()


                self.state = 236
                self.query()
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 238
                self.match(SqlBaseParser.DELETE)
                self.state = 239
                self.match(SqlBaseParser.FROM_)
                self.state = 240
                self.qualifiedName()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 241
                    self.match(SqlBaseParser.WHERE)
                    self.state = 242
                    self.booleanExpression(0)


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 245
                self.match(SqlBaseParser.ALTER)
                self.state = 246
                self.match(SqlBaseParser.TABLE)
                self.state = 247
                localctx.from_ = self.qualifiedName()
                self.state = 248
                self.match(SqlBaseParser.RENAME)
                self.state = 249
                self.match(SqlBaseParser.TO)
                self.state = 250
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 252
                self.match(SqlBaseParser.ALTER)
                self.state = 253
                self.match(SqlBaseParser.TABLE)
                self.state = 254
                localctx.tableName = self.qualifiedName()
                self.state = 255
                self.match(SqlBaseParser.RENAME)
                self.state = 256
                self.match(SqlBaseParser.COLUMN)
                self.state = 257
                localctx.from_ = self.identifier()
                self.state = 258
                self.match(SqlBaseParser.TO)
                self.state = 259
                localctx.to = self.identifier()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 261
                self.match(SqlBaseParser.ALTER)
                self.state = 262
                self.match(SqlBaseParser.TABLE)
                self.state = 263
                localctx.tableName = self.qualifiedName()
                self.state = 264
                self.match(SqlBaseParser.ADD)
                self.state = 265
                self.match(SqlBaseParser.COLUMN)
                self.state = 266
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 268
                self.match(SqlBaseParser.CREATE)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 269
                    self.match(SqlBaseParser.OR)
                    self.state = 270
                    self.match(SqlBaseParser.REPLACE)


                self.state = 273
                self.match(SqlBaseParser.VIEW)
                self.state = 274
                self.qualifiedName()
                self.state = 275
                self.match(SqlBaseParser.AS_)
                self.state = 276
                self.query()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 278
                self.match(SqlBaseParser.DROP)
                self.state = 279
                self.match(SqlBaseParser.VIEW)
                self.state = 282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 280
                    self.match(SqlBaseParser.IF)
                    self.state = 281
                    self.match(SqlBaseParser.EXISTS)


                self.state = 284
                self.qualifiedName()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 285
                self.match(SqlBaseParser.CALL)
                self.state = 286
                self.qualifiedName()
                self.state = 287
                self.match(SqlBaseParser.T__1)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER_ - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.SCHEMA - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.REVOKE - 64)) | (1 << (SqlBaseParser.PRIVILEGES - 64)) | (1 << (SqlBaseParser.PUBLIC - 64)) | (1 << (SqlBaseParser.OPTION - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.ANALYZE - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.TYPE - 64)) | (1 << (SqlBaseParser.TEXT - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.TRY_CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.SCHEMAS - 64)) | (1 << (SqlBaseParser.CATALOGS - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.COLUMN - 128)) | (1 << (SqlBaseParser.USE - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.FUNCTIONS - 128)) | (1 << (SqlBaseParser.TO - 128)) | (1 << (SqlBaseParser.SYSTEM - 128)) | (1 << (SqlBaseParser.BERNOULLI - 128)) | (1 << (SqlBaseParser.POISSONIZED - 128)) | (1 << (SqlBaseParser.TABLESAMPLE - 128)) | (1 << (SqlBaseParser.ARRAY - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.DATA - 128)) | (1 << (SqlBaseParser.START - 128)) | (1 << (SqlBaseParser.TRANSACTION - 128)) | (1 << (SqlBaseParser.COMMIT - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.WORK - 128)) | (1 << (SqlBaseParser.ISOLATION - 128)) | (1 << (SqlBaseParser.LEVEL - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.COMMITTED - 128)) | (1 << (SqlBaseParser.UNCOMMITTED - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.WRITE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.CALL - 128)) | (1 << (SqlBaseParser.INPUT - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.CASCADE - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.INCLUDING - 128)) | (1 << (SqlBaseParser.EXCLUDING - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.IF - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.COALESCE - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) != 0):
                    self.state = 288
                    self.callArgument()
                    self.state = 293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 289
                        self.match(SqlBaseParser.T__2)
                        self.state = 290
                        self.callArgument()
                        self.state = 295
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 298
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 300
                self.match(SqlBaseParser.GRANT)
                self.state = 311
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT, SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 301
                    self.privilege()
                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 302
                        self.match(SqlBaseParser.T__2)
                        self.state = 303
                        self.privilege()
                        self.state = 308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.ALL]:
                    self.state = 309
                    self.match(SqlBaseParser.ALL)
                    self.state = 310
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 313
                self.match(SqlBaseParser.ON)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TABLE:
                    self.state = 314
                    self.match(SqlBaseParser.TABLE)


                self.state = 317
                self.qualifiedName()
                self.state = 318
                self.match(SqlBaseParser.TO)
                self.state = 319
                localctx.grantee = self.identifier()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 320
                    self.match(SqlBaseParser.WITH)
                    self.state = 321
                    self.match(SqlBaseParser.GRANT)
                    self.state = 322
                    self.match(SqlBaseParser.OPTION)


                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 325
                self.match(SqlBaseParser.REVOKE)
                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 326
                    self.match(SqlBaseParser.GRANT)
                    self.state = 327
                    self.match(SqlBaseParser.OPTION)
                    self.state = 328
                    self.match(SqlBaseParser.FOR)


                self.state = 341
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT, SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 331
                    self.privilege()
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 332
                        self.match(SqlBaseParser.T__2)
                        self.state = 333
                        self.privilege()
                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.ALL]:
                    self.state = 339
                    self.match(SqlBaseParser.ALL)
                    self.state = 340
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 343
                self.match(SqlBaseParser.ON)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TABLE:
                    self.state = 344
                    self.match(SqlBaseParser.TABLE)


                self.state = 347
                self.qualifiedName()
                self.state = 348
                self.match(SqlBaseParser.FROM_)
                self.state = 349
                localctx.grantee = self.identifier()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 351
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ANALYZE:
                    self.state = 352
                    self.match(SqlBaseParser.ANALYZE)


                self.state = 366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 355
                    self.match(SqlBaseParser.T__1)
                    self.state = 356
                    self.explainOption()
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 357
                        self.match(SqlBaseParser.T__2)
                        self.state = 358
                        self.explainOption()
                        self.state = 363
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 364
                    self.match(SqlBaseParser.T__3)


                self.state = 368
                self.statement()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 369
                self.match(SqlBaseParser.SHOW)
                self.state = 370
                self.match(SqlBaseParser.CREATE)
                self.state = 371
                self.match(SqlBaseParser.TABLE)
                self.state = 372
                self.qualifiedName()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 373
                self.match(SqlBaseParser.SHOW)
                self.state = 374
                self.match(SqlBaseParser.CREATE)
                self.state = 375
                self.match(SqlBaseParser.VIEW)
                self.state = 376
                self.qualifiedName()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 377
                self.match(SqlBaseParser.SHOW)
                self.state = 378
                self.match(SqlBaseParser.TABLES)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN:
                    self.state = 379
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 380
                    self.qualifiedName()


                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 383
                    self.match(SqlBaseParser.LIKE)
                    self.state = 384
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 24:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 387
                self.match(SqlBaseParser.SHOW)
                self.state = 388
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN:
                    self.state = 389
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 390
                    self.identifier()


                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 393
                    self.match(SqlBaseParser.LIKE)
                    self.state = 394
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 397
                self.match(SqlBaseParser.SHOW)
                self.state = 398
                self.match(SqlBaseParser.CATALOGS)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 399
                    self.match(SqlBaseParser.LIKE)
                    self.state = 400
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 26:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 403
                self.match(SqlBaseParser.SHOW)
                self.state = 404
                self.match(SqlBaseParser.COLUMNS)
                self.state = 405
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 406
                self.qualifiedName()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 407
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 408
                self.qualifiedName()
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 409
                self.match(SqlBaseParser.DESC)
                self.state = 410
                self.qualifiedName()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 411
                self.match(SqlBaseParser.SHOW)
                self.state = 412
                self.match(SqlBaseParser.FUNCTIONS)
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 413
                self.match(SqlBaseParser.SHOW)
                self.state = 414
                self.match(SqlBaseParser.SESSION)
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 415
                self.match(SqlBaseParser.SET)
                self.state = 416
                self.match(SqlBaseParser.SESSION)
                self.state = 417
                self.qualifiedName()
                self.state = 418
                self.match(SqlBaseParser.EQ)
                self.state = 419
                self.expression()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 421
                self.match(SqlBaseParser.RESET)
                self.state = 422
                self.match(SqlBaseParser.SESSION)
                self.state = 423
                self.qualifiedName()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 424
                self.match(SqlBaseParser.START)
                self.state = 425
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ISOLATION or _la==SqlBaseParser.READ:
                    self.state = 426
                    self.transactionMode()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 427
                        self.match(SqlBaseParser.T__2)
                        self.state = 428
                        self.transactionMode()
                        self.state = 433
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 34:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 436
                self.match(SqlBaseParser.COMMIT)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 437
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 440
                self.match(SqlBaseParser.ROLLBACK)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WORK:
                    self.state = 441
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 444
                self.match(SqlBaseParser.SHOW)
                self.state = 445
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 446
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM_ or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 447
                self.qualifiedName()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 448
                    self.match(SqlBaseParser.WHERE)
                    self.state = 449
                    self.booleanExpression(0)


                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ORDER:
                    self.state = 452
                    self.match(SqlBaseParser.ORDER)
                    self.state = 453
                    self.match(SqlBaseParser.BY)
                    self.state = 454
                    self.sortItem()
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 455
                        self.match(SqlBaseParser.T__2)
                        self.state = 456
                        self.sortItem()
                        self.state = 461
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIMIT:
                    self.state = 464
                    self.match(SqlBaseParser.LIMIT)
                    self.state = 465
                    localctx.limit = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.INTEGER_VALUE):
                        localctx.limit = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 468
                self.match(SqlBaseParser.PREPARE)
                self.state = 469
                self.identifier()
                self.state = 470
                self.match(SqlBaseParser.FROM_)
                self.state = 471
                self.statement()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 473
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 474
                self.match(SqlBaseParser.PREPARE)
                self.state = 475
                self.identifier()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 476
                self.match(SqlBaseParser.EXECUTE)
                self.state = 477
                self.identifier()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 478
                    self.match(SqlBaseParser.USING)
                    self.state = 479
                    self.expression()
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 480
                        self.match(SqlBaseParser.T__2)
                        self.state = 481
                        self.expression()
                        self.state = 486
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 489
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 490
                self.match(SqlBaseParser.INPUT)
                self.state = 491
                self.identifier()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 492
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 493
                self.match(SqlBaseParser.OUTPUT)
                self.state = 494
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def presto_with(self):
            return self.getTypedRuleContext(SqlBaseParser.Presto_withContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 497
                self.presto_with()


            self.state = 500
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Presto_withContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(SqlBaseParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_presto_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPresto_with" ):
                listener.enterPresto_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPresto_with" ):
                listener.exitPresto_with(self)




    def presto_with(self):

        localctx = SqlBaseParser.Presto_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_presto_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(SqlBaseParser.WITH)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.RECURSIVE:
                self.state = 503
                self.match(SqlBaseParser.RECURSIVE)


            self.state = 506
            self.namedQuery()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 507
                self.match(SqlBaseParser.T__2)
                self.state = 508
                self.namedQuery()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)




    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tableElement)
        try:
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.columnDefinition()
                pass
            elif token in [SqlBaseParser.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.identifier()
            self.state = 519
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)




    def likeClause(self):

        localctx = SqlBaseParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(SqlBaseParser.LIKE)
            self.state = 522
            self.qualifiedName()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.INCLUDING or _la==SqlBaseParser.EXCLUDING:
                self.state = 523
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INCLUDING or _la==SqlBaseParser.EXCLUDING):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 524
                self.match(SqlBaseParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperties" ):
                listener.enterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperties" ):
                listener.exitTableProperties(self)




    def tableProperties(self):

        localctx = SqlBaseParser.TablePropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tableProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(SqlBaseParser.T__1)
            self.state = 528
            self.tableProperty()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 529
                self.match(SqlBaseParser.T__2)
                self.state = 530
                self.tableProperty()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 536
            self.match(SqlBaseParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)




    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tableProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.identifier()
            self.state = 539
            self.match(SqlBaseParser.EQ)
            self.state = 540
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # Token

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.queryTerm(0)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 543
                self.match(SqlBaseParser.ORDER)
                self.state = 544
                self.match(SqlBaseParser.BY)
                self.state = 545
                self.sortItem()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 546
                    self.match(SqlBaseParser.T__2)
                    self.state = 547
                    self.sortItem()
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LIMIT:
                self.state = 555
                self.match(SqlBaseParser.LIMIT)
                self.state = 556
                localctx.limit = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.INTEGER_VALUE):
                    localctx.limit = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 560
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 576
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 574
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 562
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 563
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 564
                            self.setQuantifier()


                        self.state = 567
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 568
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 569
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.UNION or _la==SqlBaseParser.EXCEPT):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 571
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 570
                            self.setQuantifier()


                        self.state = 573
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_queryPrimary)
        try:
            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.match(SqlBaseParser.TABLE)
                self.state = 581
                self.qualifiedName()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 582
                self.match(SqlBaseParser.VALUES)
                self.state = 583
                self.expression()
                self.state = 588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 584
                        self.match(SqlBaseParser.T__2)
                        self.state = 585
                        self.expression() 
                    self.state = 590
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass
            elif token in [SqlBaseParser.T__1]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                self.match(SqlBaseParser.T__1)
                self.state = 592
                self.queryNoWith()
                self.state = 593
                self.match(SqlBaseParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.expression()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 598
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NULLS:
                self.state = 601
                self.match(SqlBaseParser.NULLS)
                self.state = 602
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(SqlBaseParser.SELECT)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                self.state = 606
                self.setQuantifier()


            self.state = 609
            self.selectItem()
            self.state = 614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 610
                    self.match(SqlBaseParser.T__2)
                    self.state = 611
                    self.selectItem() 
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 617
                self.match(SqlBaseParser.FROM_)
                self.state = 618
                self.relation(0)
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 619
                        self.match(SqlBaseParser.T__2)
                        self.state = 620
                        self.relation(0) 
                    self.state = 625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)



            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 628
                self.match(SqlBaseParser.WHERE)
                self.state = 629
                localctx.where = self.booleanExpression(0)


            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 632
                self.match(SqlBaseParser.GROUP)
                self.state = 633
                self.match(SqlBaseParser.BY)
                self.state = 634
                self.groupBy()


            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 637
                self.match(SqlBaseParser.HAVING)
                self.state = 638
                localctx.having = self.booleanExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)




    def groupBy(self):

        localctx = SqlBaseParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_groupBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                self.state = 641
                self.setQuantifier()


            self.state = 644
            self.groupingElement()
            self.state = 649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 645
                    self.match(SqlBaseParser.T__2)
                    self.state = 646
                    self.groupingElement() 
                self.state = 651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingExpressions(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingExpressionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)



    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1, SqlBaseParser.T__4, SqlBaseParser.ADD, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.CURRENT_DATE, SqlBaseParser.CURRENT_TIME, SqlBaseParser.CURRENT_TIMESTAMP, SqlBaseParser.LOCALTIME, SqlBaseParser.LOCALTIMESTAMP, SqlBaseParser.EXTRACT, SqlBaseParser.CASE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.CAST, SqlBaseParser.TRY_CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NORMALIZE, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.STRING, SqlBaseParser.BINARY_LITERAL, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER, SqlBaseParser.DOUBLE_PRECISION]:
                localctx = SqlBaseParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.groupingExpressions()
                pass
            elif token in [SqlBaseParser.ROLLUP]:
                localctx = SqlBaseParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(SqlBaseParser.ROLLUP)
                self.state = 654
                self.match(SqlBaseParser.T__1)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER_ - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)) | (1 << (SqlBaseParser.TEXT - 85)) | (1 << (SqlBaseParser.GRAPHVIZ - 85)) | (1 << (SqlBaseParser.LOGICAL - 85)) | (1 << (SqlBaseParser.DISTRIBUTED - 85)) | (1 << (SqlBaseParser.SHOW - 85)) | (1 << (SqlBaseParser.TABLES - 85)) | (1 << (SqlBaseParser.SCHEMAS - 85)) | (1 << (SqlBaseParser.CATALOGS - 85)) | (1 << (SqlBaseParser.COLUMNS - 85)) | (1 << (SqlBaseParser.COLUMN - 85)) | (1 << (SqlBaseParser.USE - 85)) | (1 << (SqlBaseParser.PARTITIONS - 85)) | (1 << (SqlBaseParser.FUNCTIONS - 85)) | (1 << (SqlBaseParser.TO - 85)) | (1 << (SqlBaseParser.SYSTEM - 85)) | (1 << (SqlBaseParser.BERNOULLI - 85)) | (1 << (SqlBaseParser.POISSONIZED - 85)) | (1 << (SqlBaseParser.TABLESAMPLE - 85)) | (1 << (SqlBaseParser.ARRAY - 85)) | (1 << (SqlBaseParser.MAP - 85)) | (1 << (SqlBaseParser.SET - 85)) | (1 << (SqlBaseParser.RESET - 85)))) != 0) or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)) | (1 << (SqlBaseParser.IF - 149)) | (1 << (SqlBaseParser.NULLIF - 149)) | (1 << (SqlBaseParser.COALESCE - 149)) | (1 << (SqlBaseParser.IDENTIFIER - 149)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 149)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 149)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 149)))) != 0):
                    self.state = 655
                    self.qualifiedName()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 656
                        self.match(SqlBaseParser.T__2)
                        self.state = 657
                        self.qualifiedName()
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 665
                self.match(SqlBaseParser.T__3)
                pass
            elif token in [SqlBaseParser.CUBE]:
                localctx = SqlBaseParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 666
                self.match(SqlBaseParser.CUBE)
                self.state = 667
                self.match(SqlBaseParser.T__1)
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER_ - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)) | (1 << (SqlBaseParser.TEXT - 85)) | (1 << (SqlBaseParser.GRAPHVIZ - 85)) | (1 << (SqlBaseParser.LOGICAL - 85)) | (1 << (SqlBaseParser.DISTRIBUTED - 85)) | (1 << (SqlBaseParser.SHOW - 85)) | (1 << (SqlBaseParser.TABLES - 85)) | (1 << (SqlBaseParser.SCHEMAS - 85)) | (1 << (SqlBaseParser.CATALOGS - 85)) | (1 << (SqlBaseParser.COLUMNS - 85)) | (1 << (SqlBaseParser.COLUMN - 85)) | (1 << (SqlBaseParser.USE - 85)) | (1 << (SqlBaseParser.PARTITIONS - 85)) | (1 << (SqlBaseParser.FUNCTIONS - 85)) | (1 << (SqlBaseParser.TO - 85)) | (1 << (SqlBaseParser.SYSTEM - 85)) | (1 << (SqlBaseParser.BERNOULLI - 85)) | (1 << (SqlBaseParser.POISSONIZED - 85)) | (1 << (SqlBaseParser.TABLESAMPLE - 85)) | (1 << (SqlBaseParser.ARRAY - 85)) | (1 << (SqlBaseParser.MAP - 85)) | (1 << (SqlBaseParser.SET - 85)) | (1 << (SqlBaseParser.RESET - 85)))) != 0) or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)) | (1 << (SqlBaseParser.IF - 149)) | (1 << (SqlBaseParser.NULLIF - 149)) | (1 << (SqlBaseParser.COALESCE - 149)) | (1 << (SqlBaseParser.IDENTIFIER - 149)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 149)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 149)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 149)))) != 0):
                    self.state = 668
                    self.qualifiedName()
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 669
                        self.match(SqlBaseParser.T__2)
                        self.state = 670
                        self.qualifiedName()
                        self.state = 675
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 678
                self.match(SqlBaseParser.T__3)
                pass
            elif token in [SqlBaseParser.GROUPING]:
                localctx = SqlBaseParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 679
                self.match(SqlBaseParser.GROUPING)
                self.state = 680
                self.match(SqlBaseParser.SETS)
                self.state = 681
                self.match(SqlBaseParser.T__1)
                self.state = 682
                self.groupingSet()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 683
                    self.match(SqlBaseParser.T__2)
                    self.state = 684
                    self.groupingSet()
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 690
                self.match(SqlBaseParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingExpressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpressions" ):
                listener.enterGroupingExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpressions" ):
                listener.exitGroupingExpressions(self)




    def groupingExpressions(self):

        localctx = SqlBaseParser.GroupingExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_groupingExpressions)
        self._la = 0 # Token type
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.match(SqlBaseParser.T__1)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER_ - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.SCHEMA - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.REVOKE - 64)) | (1 << (SqlBaseParser.PRIVILEGES - 64)) | (1 << (SqlBaseParser.PUBLIC - 64)) | (1 << (SqlBaseParser.OPTION - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.ANALYZE - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.TYPE - 64)) | (1 << (SqlBaseParser.TEXT - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.TRY_CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.SCHEMAS - 64)) | (1 << (SqlBaseParser.CATALOGS - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.COLUMN - 128)) | (1 << (SqlBaseParser.USE - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.FUNCTIONS - 128)) | (1 << (SqlBaseParser.TO - 128)) | (1 << (SqlBaseParser.SYSTEM - 128)) | (1 << (SqlBaseParser.BERNOULLI - 128)) | (1 << (SqlBaseParser.POISSONIZED - 128)) | (1 << (SqlBaseParser.TABLESAMPLE - 128)) | (1 << (SqlBaseParser.ARRAY - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.DATA - 128)) | (1 << (SqlBaseParser.START - 128)) | (1 << (SqlBaseParser.TRANSACTION - 128)) | (1 << (SqlBaseParser.COMMIT - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.WORK - 128)) | (1 << (SqlBaseParser.ISOLATION - 128)) | (1 << (SqlBaseParser.LEVEL - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.COMMITTED - 128)) | (1 << (SqlBaseParser.UNCOMMITTED - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.WRITE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.CALL - 128)) | (1 << (SqlBaseParser.INPUT - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.CASCADE - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.INCLUDING - 128)) | (1 << (SqlBaseParser.EXCLUDING - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.IF - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.COALESCE - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) != 0):
                    self.state = 695
                    self.expression()
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 696
                        self.match(SqlBaseParser.T__2)
                        self.state = 697
                        self.expression()
                        self.state = 702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 705
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.match(SqlBaseParser.T__1)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (SqlBaseParser.FILTER_ - 85)) | (1 << (SqlBaseParser.OVER - 85)) | (1 << (SqlBaseParser.PARTITION - 85)) | (1 << (SqlBaseParser.RANGE - 85)) | (1 << (SqlBaseParser.ROWS - 85)) | (1 << (SqlBaseParser.PRECEDING - 85)) | (1 << (SqlBaseParser.FOLLOWING - 85)) | (1 << (SqlBaseParser.CURRENT - 85)) | (1 << (SqlBaseParser.ROW - 85)) | (1 << (SqlBaseParser.SCHEMA - 85)) | (1 << (SqlBaseParser.VIEW - 85)) | (1 << (SqlBaseParser.REPLACE - 85)) | (1 << (SqlBaseParser.GRANT - 85)) | (1 << (SqlBaseParser.REVOKE - 85)) | (1 << (SqlBaseParser.PRIVILEGES - 85)) | (1 << (SqlBaseParser.PUBLIC - 85)) | (1 << (SqlBaseParser.OPTION - 85)) | (1 << (SqlBaseParser.EXPLAIN - 85)) | (1 << (SqlBaseParser.ANALYZE - 85)) | (1 << (SqlBaseParser.FORMAT - 85)) | (1 << (SqlBaseParser.TYPE - 85)) | (1 << (SqlBaseParser.TEXT - 85)) | (1 << (SqlBaseParser.GRAPHVIZ - 85)) | (1 << (SqlBaseParser.LOGICAL - 85)) | (1 << (SqlBaseParser.DISTRIBUTED - 85)) | (1 << (SqlBaseParser.SHOW - 85)) | (1 << (SqlBaseParser.TABLES - 85)) | (1 << (SqlBaseParser.SCHEMAS - 85)) | (1 << (SqlBaseParser.CATALOGS - 85)) | (1 << (SqlBaseParser.COLUMNS - 85)) | (1 << (SqlBaseParser.COLUMN - 85)) | (1 << (SqlBaseParser.USE - 85)) | (1 << (SqlBaseParser.PARTITIONS - 85)) | (1 << (SqlBaseParser.FUNCTIONS - 85)) | (1 << (SqlBaseParser.TO - 85)) | (1 << (SqlBaseParser.SYSTEM - 85)) | (1 << (SqlBaseParser.BERNOULLI - 85)) | (1 << (SqlBaseParser.POISSONIZED - 85)) | (1 << (SqlBaseParser.TABLESAMPLE - 85)) | (1 << (SqlBaseParser.ARRAY - 85)) | (1 << (SqlBaseParser.MAP - 85)) | (1 << (SqlBaseParser.SET - 85)) | (1 << (SqlBaseParser.RESET - 85)))) != 0) or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (SqlBaseParser.SESSION - 149)) | (1 << (SqlBaseParser.DATA - 149)) | (1 << (SqlBaseParser.START - 149)) | (1 << (SqlBaseParser.TRANSACTION - 149)) | (1 << (SqlBaseParser.COMMIT - 149)) | (1 << (SqlBaseParser.ROLLBACK - 149)) | (1 << (SqlBaseParser.WORK - 149)) | (1 << (SqlBaseParser.ISOLATION - 149)) | (1 << (SqlBaseParser.LEVEL - 149)) | (1 << (SqlBaseParser.SERIALIZABLE - 149)) | (1 << (SqlBaseParser.REPEATABLE - 149)) | (1 << (SqlBaseParser.COMMITTED - 149)) | (1 << (SqlBaseParser.UNCOMMITTED - 149)) | (1 << (SqlBaseParser.READ - 149)) | (1 << (SqlBaseParser.WRITE - 149)) | (1 << (SqlBaseParser.ONLY - 149)) | (1 << (SqlBaseParser.CALL - 149)) | (1 << (SqlBaseParser.INPUT - 149)) | (1 << (SqlBaseParser.OUTPUT - 149)) | (1 << (SqlBaseParser.CASCADE - 149)) | (1 << (SqlBaseParser.RESTRICT - 149)) | (1 << (SqlBaseParser.INCLUDING - 149)) | (1 << (SqlBaseParser.EXCLUDING - 149)) | (1 << (SqlBaseParser.PROPERTIES - 149)) | (1 << (SqlBaseParser.NFD - 149)) | (1 << (SqlBaseParser.NFC - 149)) | (1 << (SqlBaseParser.NFKD - 149)) | (1 << (SqlBaseParser.NFKC - 149)) | (1 << (SqlBaseParser.IF - 149)) | (1 << (SqlBaseParser.NULLIF - 149)) | (1 << (SqlBaseParser.COALESCE - 149)) | (1 << (SqlBaseParser.IDENTIFIER - 149)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 149)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 149)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 149)))) != 0):
                    self.state = 710
                    self.qualifiedName()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 711
                        self.match(SqlBaseParser.T__2)
                        self.state = 712
                        self.qualifiedName()
                        self.state = 717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 720
                self.match(SqlBaseParser.T__3)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.qualifiedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            localctx.name = self.identifier()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.T__1:
                self.state = 725
                self.columnAliases()


            self.state = 728
            self.match(SqlBaseParser.AS_)
            self.state = 729
            self.match(SqlBaseParser.T__1)
            self.state = 730
            self.query()
            self.state = 731
            self.match(SqlBaseParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.expression()
                self.state = 740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS_:
                        self.state = 736
                        self.match(SqlBaseParser.AS_)


                    self.state = 739
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.qualifiedName()
                self.state = 743
                self.match(SqlBaseParser.T__0)
                self.state = 744
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 746
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 750
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 752
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 766
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.CROSS]:
                        self.state = 753
                        self.match(SqlBaseParser.CROSS)
                        self.state = 754
                        self.match(SqlBaseParser.JOIN)
                        self.state = 755
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [SqlBaseParser.JOIN, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.RIGHT, SqlBaseParser.FULL]:
                        self.state = 756
                        self.joinType()
                        self.state = 757
                        self.match(SqlBaseParser.JOIN)
                        self.state = 758
                        localctx.rightRelation = self.relation(0)
                        self.state = 759
                        self.joinCriteria()
                        pass
                    elif token in [SqlBaseParser.NATURAL]:
                        self.state = 761
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 762
                        self.joinType()
                        self.state = 763
                        self.match(SqlBaseParser.JOIN)
                        self.state = 764
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.JOIN, SqlBaseParser.INNER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 773
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.match(SqlBaseParser.LEFT)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 777
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 780
                self.match(SqlBaseParser.RIGHT)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 781
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.match(SqlBaseParser.FULL)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 785
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(SqlBaseParser.ON)
                self.state = 791
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.match(SqlBaseParser.USING)
                self.state = 793
                self.match(SqlBaseParser.T__1)
                self.state = 794
                self.identifier()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 795
                    self.match(SqlBaseParser.T__2)
                    self.state = 796
                    self.identifier()
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 802
                self.match(SqlBaseParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)




    def sampledRelation(self):

        localctx = SqlBaseParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.aliasedRelation()
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 807
                self.match(SqlBaseParser.TABLESAMPLE)
                self.state = 808
                self.sampleType()
                self.state = 809
                self.match(SqlBaseParser.T__1)
                self.state = 810
                localctx.percentage = self.expression()
                self.state = 811
                self.match(SqlBaseParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def POISSONIZED(self):
            return self.getToken(SqlBaseParser.POISSONIZED, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)




    def sampleType(self):

        localctx = SqlBaseParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            _la = self._input.LA(1)
            if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (SqlBaseParser.SYSTEM - 137)) | (1 << (SqlBaseParser.BERNOULLI - 137)) | (1 << (SqlBaseParser.POISSONIZED - 137)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.relationP = None # RelationPrimaryContext
            self.as_ = None # Token
            self.alias = None # IdentifierContext

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            localctx.relationP = self.relationPrimary()
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS_:
                    self.state = 818
                    localctx.as_ = self.match(SqlBaseParser.AS_)


                self.state = 821
                localctx.alias = self.identifier()
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)




    def columnAliases(self):

        localctx = SqlBaseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(SqlBaseParser.T__1)
            self.state = 828
            self.identifier()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 829
                self.match(SqlBaseParser.T__2)
                self.state = 830
                self.identifier()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 836
            self.match(SqlBaseParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(SqlBaseParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(SqlBaseParser.T__1)
                self.state = 840
                self.query()
                self.state = 841
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 843
                self.match(SqlBaseParser.UNNEST)
                self.state = 844
                self.match(SqlBaseParser.T__1)
                self.state = 845
                self.expression()
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 846
                    self.match(SqlBaseParser.T__2)
                    self.state = 847
                    self.expression()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 853
                self.match(SqlBaseParser.T__3)
                self.state = 856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.match(SqlBaseParser.WITH)
                    self.state = 855
                    self.match(SqlBaseParser.ORDINALITY)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 858
                self.match(SqlBaseParser.T__1)
                self.state = 859
                self.relation(0)
                self.state = 860
                self.match(SqlBaseParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1, SqlBaseParser.T__4, SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.CURRENT_DATE, SqlBaseParser.CURRENT_TIME, SqlBaseParser.CURRENT_TIMESTAMP, SqlBaseParser.LOCALTIME, SqlBaseParser.LOCALTIMESTAMP, SqlBaseParser.EXTRACT, SqlBaseParser.CASE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.CAST, SqlBaseParser.TRY_CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NORMALIZE, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.STRING, SqlBaseParser.BINARY_LITERAL, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER, SqlBaseParser.DOUBLE_PRECISION]:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 867
                self.predicated()
                pass
            elif token in [SqlBaseParser.NOT]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 868
                self.match(SqlBaseParser.NOT)
                self.state = 869
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 878
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 872
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 873
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 874
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 875
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 876
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 877
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._valueExpression = None # ValueExpressionContext

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)




    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            localctx._valueExpression = self.valueExpression(0)
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 884
                self.predicate(localctx._valueExpression)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 68, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.comparisonOperator()
                self.state = 888
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.comparisonOperator()
                self.state = 891
                self.comparisonQuantifier()
                self.state = 892
                self.match(SqlBaseParser.T__1)
                self.state = 893
                self.query()
                self.state = 894
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 896
                    self.match(SqlBaseParser.NOT)


                self.state = 899
                self.match(SqlBaseParser.BETWEEN)
                self.state = 900
                localctx.lower = self.valueExpression(0)
                self.state = 901
                self.match(SqlBaseParser.AND)
                self.state = 902
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 904
                    self.match(SqlBaseParser.NOT)


                self.state = 907
                self.match(SqlBaseParser.IN)
                self.state = 908
                self.match(SqlBaseParser.T__1)
                self.state = 909
                self.expression()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 910
                    self.match(SqlBaseParser.T__2)
                    self.state = 911
                    self.expression()
                    self.state = 916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 917
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 919
                    self.match(SqlBaseParser.NOT)


                self.state = 922
                self.match(SqlBaseParser.IN)
                self.state = 923
                self.match(SqlBaseParser.T__1)
                self.state = 924
                self.query()
                self.state = 925
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 927
                    self.match(SqlBaseParser.NOT)


                self.state = 930
                self.match(SqlBaseParser.LIKE)
                self.state = 931
                localctx.pattern = self.valueExpression(0)
                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 932
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 933
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 936
                self.match(SqlBaseParser.IS)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 937
                    self.match(SqlBaseParser.NOT)


                self.state = 940
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 941
                self.match(SqlBaseParser.IS)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 942
                    self.match(SqlBaseParser.NOT)


                self.state = 945
                self.match(SqlBaseParser.DISTINCT)
                self.state = 946
                self.match(SqlBaseParser.FROM_)
                self.state = 947
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.T__1, SqlBaseParser.T__4, SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.CURRENT_DATE, SqlBaseParser.CURRENT_TIME, SqlBaseParser.CURRENT_TIMESTAMP, SqlBaseParser.LOCALTIME, SqlBaseParser.LOCALTIMESTAMP, SqlBaseParser.EXTRACT, SqlBaseParser.CASE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.CAST, SqlBaseParser.TRY_CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NORMALIZE, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.STRING, SqlBaseParser.BINARY_LITERAL, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER, SqlBaseParser.DOUBLE_PRECISION]:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 951
                self.primaryExpression(0)
                pass
            elif token in [SqlBaseParser.PLUS, SqlBaseParser.MINUS]:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 952
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 953
                self.valueExpression(4)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 968
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 956
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 957
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.ASTERISK - 192)) | (1 << (SqlBaseParser.SLASH - 192)) | (1 << (SqlBaseParser.PERCENT - 192)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 958
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 959
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 960
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 961
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 962
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 963
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 964
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.AtTimeZoneContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 965
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 966
                        self.match(SqlBaseParser.AT)
                        self.state = 967
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def DOUBLE_PRECISION(self):
            return self.getToken(SqlBaseParser.DOUBLE_PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(SqlBaseParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(SqlBaseParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS_(self):
            return self.getToken(SqlBaseParser.AS_, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(SqlBaseParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class ImplicitRowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitRowConstructor" ):
                listener.enterImplicitRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitRowConstructor" ):
                listener.exitImplicitRowConstructor(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(SqlBaseParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM_(self):
            return self.getToken(SqlBaseParser.FROM_, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.Filter_Context,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 974
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 975
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 976
                self.identifier()
                self.state = 977
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 979
                self.match(SqlBaseParser.DOUBLE_PRECISION)
                self.state = 980
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 981
                self.number()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 982
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 983
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 984
                self.match(SqlBaseParser.BINARY_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 985
                self.match(SqlBaseParser.T__4)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 986
                self.match(SqlBaseParser.POSITION)
                self.state = 987
                self.match(SqlBaseParser.T__1)
                self.state = 988
                self.valueExpression(0)
                self.state = 989
                self.match(SqlBaseParser.IN)
                self.state = 990
                self.valueExpression(0)
                self.state = 991
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ImplicitRowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 993
                self.match(SqlBaseParser.T__1)
                self.state = 994
                self.expression()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 995
                    self.match(SqlBaseParser.T__2)
                    self.state = 996
                    self.expression()
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1002
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1004
                self.match(SqlBaseParser.ROW)
                self.state = 1005
                self.match(SqlBaseParser.T__1)
                self.state = 1006
                self.expression()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1007
                    self.match(SqlBaseParser.T__2)
                    self.state = 1008
                    self.expression()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1014
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1016
                self.qualifiedName()
                self.state = 1017
                self.match(SqlBaseParser.T__1)
                self.state = 1018
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1019
                self.match(SqlBaseParser.T__3)
                self.state = 1021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1020
                    self.filter_()


                self.state = 1024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1023
                    self.over()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1026
                self.qualifiedName()
                self.state = 1027
                self.match(SqlBaseParser.T__1)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER_ - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.SCHEMA - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.REVOKE - 64)) | (1 << (SqlBaseParser.PRIVILEGES - 64)) | (1 << (SqlBaseParser.PUBLIC - 64)) | (1 << (SqlBaseParser.OPTION - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.ANALYZE - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.TYPE - 64)) | (1 << (SqlBaseParser.TEXT - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.TRY_CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.SCHEMAS - 64)) | (1 << (SqlBaseParser.CATALOGS - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.COLUMN - 128)) | (1 << (SqlBaseParser.USE - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.FUNCTIONS - 128)) | (1 << (SqlBaseParser.TO - 128)) | (1 << (SqlBaseParser.SYSTEM - 128)) | (1 << (SqlBaseParser.BERNOULLI - 128)) | (1 << (SqlBaseParser.POISSONIZED - 128)) | (1 << (SqlBaseParser.TABLESAMPLE - 128)) | (1 << (SqlBaseParser.ARRAY - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.DATA - 128)) | (1 << (SqlBaseParser.START - 128)) | (1 << (SqlBaseParser.TRANSACTION - 128)) | (1 << (SqlBaseParser.COMMIT - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.WORK - 128)) | (1 << (SqlBaseParser.ISOLATION - 128)) | (1 << (SqlBaseParser.LEVEL - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.COMMITTED - 128)) | (1 << (SqlBaseParser.UNCOMMITTED - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.WRITE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.CALL - 128)) | (1 << (SqlBaseParser.INPUT - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.CASCADE - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.INCLUDING - 128)) | (1 << (SqlBaseParser.EXCLUDING - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.IF - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.COALESCE - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) != 0):
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                        self.state = 1028
                        self.setQuantifier()


                    self.state = 1031
                    self.expression()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1032
                        self.match(SqlBaseParser.T__2)
                        self.state = 1033
                        self.expression()
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1041
                self.match(SqlBaseParser.T__3)
                self.state = 1043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1042
                    self.filter_()


                self.state = 1046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1045
                    self.over()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1048
                self.identifier()
                self.state = 1049
                self.match(SqlBaseParser.T__5)
                self.state = 1050
                self.expression()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1052
                self.match(SqlBaseParser.T__1)
                self.state = 1053
                self.identifier()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1054
                    self.match(SqlBaseParser.T__2)
                    self.state = 1055
                    self.identifier()
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.match(SqlBaseParser.T__3)
                self.state = 1062
                self.match(SqlBaseParser.T__5)
                self.state = 1063
                self.expression()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1065
                self.match(SqlBaseParser.T__1)
                self.state = 1066
                self.query()
                self.state = 1067
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1069
                self.match(SqlBaseParser.EXISTS)
                self.state = 1070
                self.match(SqlBaseParser.T__1)
                self.state = 1071
                self.query()
                self.state = 1072
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1074
                self.match(SqlBaseParser.CASE)
                self.state = 1075
                self.valueExpression(0)
                self.state = 1077 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1076
                    self.whenClause()
                    self.state = 1079 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1081
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1082
                    localctx.elseExpression = self.expression()


                self.state = 1085
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1087
                self.match(SqlBaseParser.CASE)
                self.state = 1089 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1088
                    self.whenClause()
                    self.state = 1091 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1093
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1094
                    localctx.elseExpression = self.expression()


                self.state = 1097
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1099
                self.match(SqlBaseParser.CAST)
                self.state = 1100
                self.match(SqlBaseParser.T__1)
                self.state = 1101
                self.expression()
                self.state = 1102
                self.match(SqlBaseParser.AS_)
                self.state = 1103
                self.type_(0)
                self.state = 1104
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1106
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1107
                self.match(SqlBaseParser.T__1)
                self.state = 1108
                self.expression()
                self.state = 1109
                self.match(SqlBaseParser.AS_)
                self.state = 1110
                self.type_(0)
                self.state = 1111
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1113
                self.match(SqlBaseParser.ARRAY)
                self.state = 1114
                self.match(SqlBaseParser.T__6)
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.SUBSTRING) | (1 << SqlBaseParser.POSITION) | (1 << SqlBaseParser.TINYINT) | (1 << SqlBaseParser.SMALLINT) | (1 << SqlBaseParser.INTEGER) | (1 << SqlBaseParser.DATE) | (1 << SqlBaseParser.TIME) | (1 << SqlBaseParser.TIMESTAMP) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND) | (1 << SqlBaseParser.ZONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.CURRENT_DATE - 64)) | (1 << (SqlBaseParser.CURRENT_TIME - 64)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 64)) | (1 << (SqlBaseParser.LOCALTIME - 64)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.CASE - 64)) | (1 << (SqlBaseParser.FILTER_ - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.SCHEMA - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.REVOKE - 64)) | (1 << (SqlBaseParser.PRIVILEGES - 64)) | (1 << (SqlBaseParser.PUBLIC - 64)) | (1 << (SqlBaseParser.OPTION - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.ANALYZE - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.TYPE - 64)) | (1 << (SqlBaseParser.TEXT - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.DISTRIBUTED - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.TRY_CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.SCHEMAS - 64)) | (1 << (SqlBaseParser.CATALOGS - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.COLUMN - 128)) | (1 << (SqlBaseParser.USE - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.FUNCTIONS - 128)) | (1 << (SqlBaseParser.TO - 128)) | (1 << (SqlBaseParser.SYSTEM - 128)) | (1 << (SqlBaseParser.BERNOULLI - 128)) | (1 << (SqlBaseParser.POISSONIZED - 128)) | (1 << (SqlBaseParser.TABLESAMPLE - 128)) | (1 << (SqlBaseParser.ARRAY - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.DATA - 128)) | (1 << (SqlBaseParser.START - 128)) | (1 << (SqlBaseParser.TRANSACTION - 128)) | (1 << (SqlBaseParser.COMMIT - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.WORK - 128)) | (1 << (SqlBaseParser.ISOLATION - 128)) | (1 << (SqlBaseParser.LEVEL - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.COMMITTED - 128)) | (1 << (SqlBaseParser.UNCOMMITTED - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.WRITE - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.CALL - 128)) | (1 << (SqlBaseParser.INPUT - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.CASCADE - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.INCLUDING - 128)) | (1 << (SqlBaseParser.EXCLUDING - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.NORMALIZE - 128)) | (1 << (SqlBaseParser.NFD - 128)) | (1 << (SqlBaseParser.NFC - 128)) | (1 << (SqlBaseParser.NFKD - 128)) | (1 << (SqlBaseParser.NFKC - 128)) | (1 << (SqlBaseParser.IF - 128)) | (1 << (SqlBaseParser.NULLIF - 128)) | (1 << (SqlBaseParser.COALESCE - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (SqlBaseParser.STRING - 196)) | (1 << (SqlBaseParser.BINARY_LITERAL - 196)) | (1 << (SqlBaseParser.INTEGER_VALUE - 196)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 196)) | (1 << (SqlBaseParser.IDENTIFIER - 196)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 196)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 196)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 196)))) != 0):
                    self.state = 1115
                    self.expression()
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1116
                        self.match(SqlBaseParser.T__2)
                        self.state = 1117
                        self.expression()
                        self.state = 1122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1125
                self.match(SqlBaseParser.T__7)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1126
                self.identifier()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1127
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1128
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 1132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.match(SqlBaseParser.T__1)
                    self.state = 1130
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1131
                    self.match(SqlBaseParser.T__3)


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1134
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 1138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1135
                    self.match(SqlBaseParser.T__1)
                    self.state = 1136
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1137
                    self.match(SqlBaseParser.T__3)


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1140
                localctx.name = self.match(SqlBaseParser.LOCALTIME)
                self.state = 1144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1141
                    self.match(SqlBaseParser.T__1)
                    self.state = 1142
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1143
                    self.match(SqlBaseParser.T__3)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1146
                localctx.name = self.match(SqlBaseParser.LOCALTIMESTAMP)
                self.state = 1150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1147
                    self.match(SqlBaseParser.T__1)
                    self.state = 1148
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1149
                    self.match(SqlBaseParser.T__3)


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1152
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 1153
                self.match(SqlBaseParser.T__1)
                self.state = 1154
                self.valueExpression(0)
                self.state = 1155
                self.match(SqlBaseParser.FROM_)
                self.state = 1156
                self.valueExpression(0)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FOR:
                    self.state = 1157
                    self.match(SqlBaseParser.FOR)
                    self.state = 1158
                    self.valueExpression(0)


                self.state = 1161
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1163
                self.match(SqlBaseParser.NORMALIZE)
                self.state = 1164
                self.match(SqlBaseParser.T__1)
                self.state = 1165
                self.valueExpression(0)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__2:
                    self.state = 1166
                    self.match(SqlBaseParser.T__2)
                    self.state = 1167
                    self.normalForm()


                self.state = 1170
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1172
                self.match(SqlBaseParser.EXTRACT)
                self.state = 1173
                self.match(SqlBaseParser.T__1)
                self.state = 1174
                self.identifier()
                self.state = 1175
                self.match(SqlBaseParser.FROM_)
                self.state = 1176
                self.valueExpression(0)
                self.state = 1177
                self.match(SqlBaseParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1189
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1181
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1182
                        self.match(SqlBaseParser.T__6)
                        self.state = 1183
                        localctx.index = self.valueExpression(0)
                        self.state = 1184
                        self.match(SqlBaseParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1186
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1187
                        self.match(SqlBaseParser.T__0)
                        self.state = 1188
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)



    def timeZoneSpecifier(self):

        localctx = SqlBaseParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_timeZoneSpecifier)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(SqlBaseParser.TIME)
                self.state = 1195
                self.match(SqlBaseParser.ZONE)
                self.state = 1196
                self.interval()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1197
                self.match(SqlBaseParser.TIME)
                self.state = 1198
                self.match(SqlBaseParser.ZONE)
                self.state = 1199
                self.match(SqlBaseParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            _la = self._input.LA(1)
            if not(((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & ((1 << (SqlBaseParser.EQ - 184)) | (1 << (SqlBaseParser.NEQ - 184)) | (1 << (SqlBaseParser.LT - 184)) | (1 << (SqlBaseParser.LTE - 184)) | (1 << (SqlBaseParser.GT - 184)) | (1 << (SqlBaseParser.GTE - 184)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)




    def comparisonQuantifier(self):

        localctx = SqlBaseParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.SOME) | (1 << SqlBaseParser.ANY))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.TRUE or _la==SqlBaseParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(SqlBaseParser.INTERVAL)
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                self.state = 1209
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1212
            self.match(SqlBaseParser.STRING)
            self.state = 1213
            localctx.from_ = self.intervalField()
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1214
                self.match(SqlBaseParser.TO)
                self.state = 1215
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.YEAR) | (1 << SqlBaseParser.MONTH) | (1 << SqlBaseParser.DAY) | (1 << SqlBaseParser.HOUR) | (1 << SqlBaseParser.MINUTE) | (1 << SqlBaseParser.SECOND))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.Type_Context)
            else:
                return self.getTypedRuleContext(SqlBaseParser.Type_Context,i)


        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def baseType(self):
            return self.getTypedRuleContext(SqlBaseParser.BaseTypeContext,0)


        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.Type_Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_type_, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1221
                self.match(SqlBaseParser.ARRAY)
                self.state = 1222
                self.match(SqlBaseParser.LT)
                self.state = 1223
                self.type_(0)
                self.state = 1224
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                self.state = 1226
                self.match(SqlBaseParser.MAP)
                self.state = 1227
                self.match(SqlBaseParser.LT)
                self.state = 1228
                self.type_(0)
                self.state = 1229
                self.match(SqlBaseParser.T__2)
                self.state = 1230
                self.type_(0)
                self.state = 1231
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                self.state = 1233
                self.match(SqlBaseParser.ROW)
                self.state = 1234
                self.match(SqlBaseParser.T__1)
                self.state = 1235
                self.identifier()
                self.state = 1236
                self.type_(0)
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1237
                    self.match(SqlBaseParser.T__2)
                    self.state = 1238
                    self.identifier()
                    self.state = 1239
                    self.type_(0)
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1246
                self.match(SqlBaseParser.T__3)
                pass

            elif la_ == 4:
                self.state = 1248
                self.baseType()
                self.state = 1260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1249
                    self.match(SqlBaseParser.T__1)
                    self.state = 1250
                    self.typeParameter()
                    self.state = 1255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1251
                        self.match(SqlBaseParser.T__2)
                        self.state = 1252
                        self.typeParameter()
                        self.state = 1257
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1258
                    self.match(SqlBaseParser.T__3)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.Type_Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type_)
                    self.state = 1264
                    if not self.precpred(self._ctx, 5):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                    self.state = 1265
                    self.match(SqlBaseParser.ARRAY) 
                self.state = 1270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.Type_Context,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = SqlBaseParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeParameter)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER, SqlBaseParser.TIME_WITH_TIME_ZONE, SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, SqlBaseParser.DOUBLE_PRECISION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.type_(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_WITH_TIME_ZONE(self):
            return self.getToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0)

        def TIMESTAMP_WITH_TIME_ZONE(self):
            return self.getToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0)

        def DOUBLE_PRECISION(self):
            return self.getToken(SqlBaseParser.DOUBLE_PRECISION, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = SqlBaseParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_baseType)
        try:
            self.state = 1279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.TIME_WITH_TIME_ZONE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.match(SqlBaseParser.TIME_WITH_TIME_ZONE)
                pass
            elif token in [SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.match(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE)
                pass
            elif token in [SqlBaseParser.DOUBLE_PRECISION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1277
                self.match(SqlBaseParser.DOUBLE_PRECISION)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1278
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(SqlBaseParser.WHEN)
            self.state = 1282
            localctx.condition = self.expression()
            self.state = 1283
            self.match(SqlBaseParser.THEN)
            self.state = 1284
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(SqlBaseParser.FILTER_, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_" ):
                listener.enterFilter_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_" ):
                listener.exitFilter_(self)




    def filter_(self):

        localctx = SqlBaseParser.Filter_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_filter_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(SqlBaseParser.FILTER_)
            self.state = 1287
            self.match(SqlBaseParser.T__1)
            self.state = 1288
            self.match(SqlBaseParser.WHERE)
            self.state = 1289
            self.booleanExpression(0)
            self.state = 1290
            self.match(SqlBaseParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_over)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(SqlBaseParser.OVER)
            self.state = 1293
            self.match(SqlBaseParser.T__1)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.PARTITION:
                self.state = 1294
                self.match(SqlBaseParser.PARTITION)
                self.state = 1295
                self.match(SqlBaseParser.BY)
                self.state = 1296
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1297
                    self.match(SqlBaseParser.T__2)
                    self.state = 1298
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1306
                self.match(SqlBaseParser.ORDER)
                self.state = 1307
                self.match(SqlBaseParser.BY)
                self.state = 1308
                self.sortItem()
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1309
                    self.match(SqlBaseParser.T__2)
                    self.state = 1310
                    self.sortItem()
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                self.state = 1318
                self.windowFrame()


            self.state = 1321
            self.match(SqlBaseParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_windowFrame)
        try:
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1324
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1326
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1327
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1328
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1329
                localctx.start = self.frameBound()
                self.state = 1330
                self.match(SqlBaseParser.AND)
                self.state = 1331
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1333
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1334
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1335
                localctx.start = self.frameBound()
                self.state = 1336
                self.match(SqlBaseParser.AND)
                self.state = 1337
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1342
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1344
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                self.match(SqlBaseParser.CURRENT)
                self.state = 1346
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1347
                self.expression()
                self.state = 1348
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PRECEDING or _la==SqlBaseParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)



    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 1356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FORMAT]:
                localctx = SqlBaseParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.match(SqlBaseParser.FORMAT)
                self.state = 1353
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TEXT or _la==SqlBaseParser.GRAPHVIZ):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.TYPE]:
                localctx = SqlBaseParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1354
                self.match(SqlBaseParser.TYPE)
                self.state = 1355
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.LOGICAL or _la==SqlBaseParser.DISTRIBUTED):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(SqlBaseParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)



    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 1363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ISOLATION]:
                localctx = SqlBaseParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.match(SqlBaseParser.ISOLATION)
                self.state = 1359
                self.match(SqlBaseParser.LEVEL)
                self.state = 1360
                self.levelOfIsolation()
                pass
            elif token in [SqlBaseParser.READ]:
                localctx = SqlBaseParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.match(SqlBaseParser.READ)
                self.state = 1362
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.WRITE or _la==SqlBaseParser.ONLY):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)



    def levelOfIsolation(self):

        localctx = SqlBaseParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_levelOfIsolation)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(SqlBaseParser.READ)
                self.state = 1366
                self.match(SqlBaseParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.match(SqlBaseParser.READ)
                self.state = 1368
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 1370
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1371
                self.match(SqlBaseParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)



    def callArgument(self):

        localctx = SqlBaseParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_callArgument)
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self.expression()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1375
                self.identifier()
                self.state = 1376
                self.match(SqlBaseParser.T__8)
                self.state = 1377
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = SqlBaseParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_privilege)
        try:
            self.state = 1385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(SqlBaseParser.SELECT)
                pass
            elif token in [SqlBaseParser.DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.match(SqlBaseParser.DELETE)
                pass
            elif token in [SqlBaseParser.INSERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1383
                self.match(SqlBaseParser.INSERT)
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE, SqlBaseParser.IDENTIFIER, SqlBaseParser.DIGIT_IDENTIFIER, SqlBaseParser.QUOTED_IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1384
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.identifier()
            self.state = 1392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1388
                    self.match(SqlBaseParser.T__0)
                    self.state = 1389
                    self.identifier() 
                self.state = 1394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)


    class QuotedIdentifierAlternativeContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identifier)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1395
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.QUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1396
                self.quotedIdentifier()
                pass
            elif token in [SqlBaseParser.ADD, SqlBaseParser.NO, SqlBaseParser.SUBSTRING, SqlBaseParser.POSITION, SqlBaseParser.TINYINT, SqlBaseParser.SMALLINT, SqlBaseParser.INTEGER, SqlBaseParser.DATE, SqlBaseParser.TIME, SqlBaseParser.TIMESTAMP, SqlBaseParser.INTERVAL, SqlBaseParser.YEAR, SqlBaseParser.MONTH, SqlBaseParser.DAY, SqlBaseParser.HOUR, SqlBaseParser.MINUTE, SqlBaseParser.SECOND, SqlBaseParser.ZONE, SqlBaseParser.FILTER_, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.ROW, SqlBaseParser.SCHEMA, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.GRANT, SqlBaseParser.REVOKE, SqlBaseParser.PRIVILEGES, SqlBaseParser.PUBLIC, SqlBaseParser.OPTION, SqlBaseParser.EXPLAIN, SqlBaseParser.ANALYZE, SqlBaseParser.FORMAT, SqlBaseParser.TYPE, SqlBaseParser.TEXT, SqlBaseParser.GRAPHVIZ, SqlBaseParser.LOGICAL, SqlBaseParser.DISTRIBUTED, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.SCHEMAS, SqlBaseParser.CATALOGS, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.TO, SqlBaseParser.SYSTEM, SqlBaseParser.BERNOULLI, SqlBaseParser.POISSONIZED, SqlBaseParser.TABLESAMPLE, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.SESSION, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.WORK, SqlBaseParser.ISOLATION, SqlBaseParser.LEVEL, SqlBaseParser.SERIALIZABLE, SqlBaseParser.REPEATABLE, SqlBaseParser.COMMITTED, SqlBaseParser.UNCOMMITTED, SqlBaseParser.READ, SqlBaseParser.WRITE, SqlBaseParser.ONLY, SqlBaseParser.CALL, SqlBaseParser.INPUT, SqlBaseParser.OUTPUT, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.INCLUDING, SqlBaseParser.EXCLUDING, SqlBaseParser.PROPERTIES, SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC, SqlBaseParser.IF, SqlBaseParser.NULLIF, SqlBaseParser.COALESCE]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.nonReserved()
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1398
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            elif token in [SqlBaseParser.DIGIT_IDENTIFIER]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1399
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(SqlBaseParser.QUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_number)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.DECIMAL_VALUE]:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1404
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [SqlBaseParser.INTEGER_VALUE]:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def FILTER_(self):
            return self.getToken(SqlBaseParser.FILTER_, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def TINYINT(self):
            return self.getToken(SqlBaseParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(SqlBaseParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def POISSONIZED(self):
            return self.getToken(SqlBaseParser.POISSONIZED, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NULLIF(self):
            return self.getToken(SqlBaseParser.NULLIF, 0)

        def COALESCE(self):
            return self.getToken(SqlBaseParser.COALESCE, 0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PUBLIC(self):
            return self.getToken(SqlBaseParser.PUBLIC, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nonReserved)
        try:
            self.state = 1497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SHOW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.match(SqlBaseParser.SHOW)
                pass
            elif token in [SqlBaseParser.TABLES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.match(SqlBaseParser.TABLES)
                pass
            elif token in [SqlBaseParser.COLUMNS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1410
                self.match(SqlBaseParser.COLUMNS)
                pass
            elif token in [SqlBaseParser.COLUMN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1411
                self.match(SqlBaseParser.COLUMN)
                pass
            elif token in [SqlBaseParser.PARTITIONS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1412
                self.match(SqlBaseParser.PARTITIONS)
                pass
            elif token in [SqlBaseParser.FUNCTIONS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1413
                self.match(SqlBaseParser.FUNCTIONS)
                pass
            elif token in [SqlBaseParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1414
                self.match(SqlBaseParser.SCHEMAS)
                pass
            elif token in [SqlBaseParser.CATALOGS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1415
                self.match(SqlBaseParser.CATALOGS)
                pass
            elif token in [SqlBaseParser.SESSION]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1416
                self.match(SqlBaseParser.SESSION)
                pass
            elif token in [SqlBaseParser.ADD]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1417
                self.match(SqlBaseParser.ADD)
                pass
            elif token in [SqlBaseParser.FILTER_]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1418
                self.match(SqlBaseParser.FILTER_)
                pass
            elif token in [SqlBaseParser.OVER]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1419
                self.match(SqlBaseParser.OVER)
                pass
            elif token in [SqlBaseParser.PARTITION]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1420
                self.match(SqlBaseParser.PARTITION)
                pass
            elif token in [SqlBaseParser.RANGE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1421
                self.match(SqlBaseParser.RANGE)
                pass
            elif token in [SqlBaseParser.ROWS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1422
                self.match(SqlBaseParser.ROWS)
                pass
            elif token in [SqlBaseParser.PRECEDING]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1423
                self.match(SqlBaseParser.PRECEDING)
                pass
            elif token in [SqlBaseParser.FOLLOWING]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1424
                self.match(SqlBaseParser.FOLLOWING)
                pass
            elif token in [SqlBaseParser.CURRENT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1425
                self.match(SqlBaseParser.CURRENT)
                pass
            elif token in [SqlBaseParser.ROW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1426
                self.match(SqlBaseParser.ROW)
                pass
            elif token in [SqlBaseParser.MAP]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1427
                self.match(SqlBaseParser.MAP)
                pass
            elif token in [SqlBaseParser.ARRAY]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1428
                self.match(SqlBaseParser.ARRAY)
                pass
            elif token in [SqlBaseParser.TINYINT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1429
                self.match(SqlBaseParser.TINYINT)
                pass
            elif token in [SqlBaseParser.SMALLINT]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1430
                self.match(SqlBaseParser.SMALLINT)
                pass
            elif token in [SqlBaseParser.INTEGER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1431
                self.match(SqlBaseParser.INTEGER)
                pass
            elif token in [SqlBaseParser.DATE]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1432
                self.match(SqlBaseParser.DATE)
                pass
            elif token in [SqlBaseParser.TIME]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1433
                self.match(SqlBaseParser.TIME)
                pass
            elif token in [SqlBaseParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1434
                self.match(SqlBaseParser.TIMESTAMP)
                pass
            elif token in [SqlBaseParser.INTERVAL]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1435
                self.match(SqlBaseParser.INTERVAL)
                pass
            elif token in [SqlBaseParser.ZONE]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1436
                self.match(SqlBaseParser.ZONE)
                pass
            elif token in [SqlBaseParser.YEAR]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1437
                self.match(SqlBaseParser.YEAR)
                pass
            elif token in [SqlBaseParser.MONTH]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1438
                self.match(SqlBaseParser.MONTH)
                pass
            elif token in [SqlBaseParser.DAY]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1439
                self.match(SqlBaseParser.DAY)
                pass
            elif token in [SqlBaseParser.HOUR]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1440
                self.match(SqlBaseParser.HOUR)
                pass
            elif token in [SqlBaseParser.MINUTE]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1441
                self.match(SqlBaseParser.MINUTE)
                pass
            elif token in [SqlBaseParser.SECOND]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1442
                self.match(SqlBaseParser.SECOND)
                pass
            elif token in [SqlBaseParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1443
                self.match(SqlBaseParser.EXPLAIN)
                pass
            elif token in [SqlBaseParser.ANALYZE]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1444
                self.match(SqlBaseParser.ANALYZE)
                pass
            elif token in [SqlBaseParser.FORMAT]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1445
                self.match(SqlBaseParser.FORMAT)
                pass
            elif token in [SqlBaseParser.TYPE]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1446
                self.match(SqlBaseParser.TYPE)
                pass
            elif token in [SqlBaseParser.TEXT]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1447
                self.match(SqlBaseParser.TEXT)
                pass
            elif token in [SqlBaseParser.GRAPHVIZ]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1448
                self.match(SqlBaseParser.GRAPHVIZ)
                pass
            elif token in [SqlBaseParser.LOGICAL]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1449
                self.match(SqlBaseParser.LOGICAL)
                pass
            elif token in [SqlBaseParser.DISTRIBUTED]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1450
                self.match(SqlBaseParser.DISTRIBUTED)
                pass
            elif token in [SqlBaseParser.TABLESAMPLE]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1451
                self.match(SqlBaseParser.TABLESAMPLE)
                pass
            elif token in [SqlBaseParser.SYSTEM]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1452
                self.match(SqlBaseParser.SYSTEM)
                pass
            elif token in [SqlBaseParser.BERNOULLI]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1453
                self.match(SqlBaseParser.BERNOULLI)
                pass
            elif token in [SqlBaseParser.POISSONIZED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1454
                self.match(SqlBaseParser.POISSONIZED)
                pass
            elif token in [SqlBaseParser.USE]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1455
                self.match(SqlBaseParser.USE)
                pass
            elif token in [SqlBaseParser.TO]:
                self.enterOuterAlt(localctx, 49)
                self.state = 1456
                self.match(SqlBaseParser.TO)
                pass
            elif token in [SqlBaseParser.SET]:
                self.enterOuterAlt(localctx, 50)
                self.state = 1457
                self.match(SqlBaseParser.SET)
                pass
            elif token in [SqlBaseParser.RESET]:
                self.enterOuterAlt(localctx, 51)
                self.state = 1458
                self.match(SqlBaseParser.RESET)
                pass
            elif token in [SqlBaseParser.VIEW]:
                self.enterOuterAlt(localctx, 52)
                self.state = 1459
                self.match(SqlBaseParser.VIEW)
                pass
            elif token in [SqlBaseParser.REPLACE]:
                self.enterOuterAlt(localctx, 53)
                self.state = 1460
                self.match(SqlBaseParser.REPLACE)
                pass
            elif token in [SqlBaseParser.IF]:
                self.enterOuterAlt(localctx, 54)
                self.state = 1461
                self.match(SqlBaseParser.IF)
                pass
            elif token in [SqlBaseParser.NULLIF]:
                self.enterOuterAlt(localctx, 55)
                self.state = 1462
                self.match(SqlBaseParser.NULLIF)
                pass
            elif token in [SqlBaseParser.COALESCE]:
                self.enterOuterAlt(localctx, 56)
                self.state = 1463
                self.match(SqlBaseParser.COALESCE)
                pass
            elif token in [SqlBaseParser.NFD, SqlBaseParser.NFC, SqlBaseParser.NFKD, SqlBaseParser.NFKC]:
                self.enterOuterAlt(localctx, 57)
                self.state = 1464
                self.normalForm()
                pass
            elif token in [SqlBaseParser.POSITION]:
                self.enterOuterAlt(localctx, 58)
                self.state = 1465
                self.match(SqlBaseParser.POSITION)
                pass
            elif token in [SqlBaseParser.NO]:
                self.enterOuterAlt(localctx, 59)
                self.state = 1466
                self.match(SqlBaseParser.NO)
                pass
            elif token in [SqlBaseParser.DATA]:
                self.enterOuterAlt(localctx, 60)
                self.state = 1467
                self.match(SqlBaseParser.DATA)
                pass
            elif token in [SqlBaseParser.START]:
                self.enterOuterAlt(localctx, 61)
                self.state = 1468
                self.match(SqlBaseParser.START)
                pass
            elif token in [SqlBaseParser.TRANSACTION]:
                self.enterOuterAlt(localctx, 62)
                self.state = 1469
                self.match(SqlBaseParser.TRANSACTION)
                pass
            elif token in [SqlBaseParser.COMMIT]:
                self.enterOuterAlt(localctx, 63)
                self.state = 1470
                self.match(SqlBaseParser.COMMIT)
                pass
            elif token in [SqlBaseParser.ROLLBACK]:
                self.enterOuterAlt(localctx, 64)
                self.state = 1471
                self.match(SqlBaseParser.ROLLBACK)
                pass
            elif token in [SqlBaseParser.WORK]:
                self.enterOuterAlt(localctx, 65)
                self.state = 1472
                self.match(SqlBaseParser.WORK)
                pass
            elif token in [SqlBaseParser.ISOLATION]:
                self.enterOuterAlt(localctx, 66)
                self.state = 1473
                self.match(SqlBaseParser.ISOLATION)
                pass
            elif token in [SqlBaseParser.LEVEL]:
                self.enterOuterAlt(localctx, 67)
                self.state = 1474
                self.match(SqlBaseParser.LEVEL)
                pass
            elif token in [SqlBaseParser.SERIALIZABLE]:
                self.enterOuterAlt(localctx, 68)
                self.state = 1475
                self.match(SqlBaseParser.SERIALIZABLE)
                pass
            elif token in [SqlBaseParser.REPEATABLE]:
                self.enterOuterAlt(localctx, 69)
                self.state = 1476
                self.match(SqlBaseParser.REPEATABLE)
                pass
            elif token in [SqlBaseParser.COMMITTED]:
                self.enterOuterAlt(localctx, 70)
                self.state = 1477
                self.match(SqlBaseParser.COMMITTED)
                pass
            elif token in [SqlBaseParser.UNCOMMITTED]:
                self.enterOuterAlt(localctx, 71)
                self.state = 1478
                self.match(SqlBaseParser.UNCOMMITTED)
                pass
            elif token in [SqlBaseParser.READ]:
                self.enterOuterAlt(localctx, 72)
                self.state = 1479
                self.match(SqlBaseParser.READ)
                pass
            elif token in [SqlBaseParser.WRITE]:
                self.enterOuterAlt(localctx, 73)
                self.state = 1480
                self.match(SqlBaseParser.WRITE)
                pass
            elif token in [SqlBaseParser.ONLY]:
                self.enterOuterAlt(localctx, 74)
                self.state = 1481
                self.match(SqlBaseParser.ONLY)
                pass
            elif token in [SqlBaseParser.CALL]:
                self.enterOuterAlt(localctx, 75)
                self.state = 1482
                self.match(SqlBaseParser.CALL)
                pass
            elif token in [SqlBaseParser.GRANT]:
                self.enterOuterAlt(localctx, 76)
                self.state = 1483
                self.match(SqlBaseParser.GRANT)
                pass
            elif token in [SqlBaseParser.REVOKE]:
                self.enterOuterAlt(localctx, 77)
                self.state = 1484
                self.match(SqlBaseParser.REVOKE)
                pass
            elif token in [SqlBaseParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 78)
                self.state = 1485
                self.match(SqlBaseParser.PRIVILEGES)
                pass
            elif token in [SqlBaseParser.PUBLIC]:
                self.enterOuterAlt(localctx, 79)
                self.state = 1486
                self.match(SqlBaseParser.PUBLIC)
                pass
            elif token in [SqlBaseParser.OPTION]:
                self.enterOuterAlt(localctx, 80)
                self.state = 1487
                self.match(SqlBaseParser.OPTION)
                pass
            elif token in [SqlBaseParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 81)
                self.state = 1488
                self.match(SqlBaseParser.SUBSTRING)
                pass
            elif token in [SqlBaseParser.SCHEMA]:
                self.enterOuterAlt(localctx, 82)
                self.state = 1489
                self.match(SqlBaseParser.SCHEMA)
                pass
            elif token in [SqlBaseParser.CASCADE]:
                self.enterOuterAlt(localctx, 83)
                self.state = 1490
                self.match(SqlBaseParser.CASCADE)
                pass
            elif token in [SqlBaseParser.RESTRICT]:
                self.enterOuterAlt(localctx, 84)
                self.state = 1491
                self.match(SqlBaseParser.RESTRICT)
                pass
            elif token in [SqlBaseParser.INPUT]:
                self.enterOuterAlt(localctx, 85)
                self.state = 1492
                self.match(SqlBaseParser.INPUT)
                pass
            elif token in [SqlBaseParser.OUTPUT]:
                self.enterOuterAlt(localctx, 86)
                self.state = 1493
                self.match(SqlBaseParser.OUTPUT)
                pass
            elif token in [SqlBaseParser.INCLUDING]:
                self.enterOuterAlt(localctx, 87)
                self.state = 1494
                self.match(SqlBaseParser.INCLUDING)
                pass
            elif token in [SqlBaseParser.EXCLUDING]:
                self.enterOuterAlt(localctx, 88)
                self.state = 1495
                self.match(SqlBaseParser.EXCLUDING)
                pass
            elif token in [SqlBaseParser.PROPERTIES]:
                self.enterOuterAlt(localctx, 89)
                self.state = 1496
                self.match(SqlBaseParser.PROPERTIES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)




    def normalForm(self):

        localctx = SqlBaseParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            _la = self._input.LA(1)
            if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (SqlBaseParser.NFD - 177)) | (1 << (SqlBaseParser.NFC - 177)) | (1 << (SqlBaseParser.NFKD - 177)) | (1 << (SqlBaseParser.NFKC - 177)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.queryTerm_sempred
        self._predicates[23] = self.relation_sempred
        self._predicates[32] = self.booleanExpression_sempred
        self._predicates[35] = self.valueExpression_sempred
        self._predicates[36] = self.primaryExpression_sempred
        self._predicates[43] = self.type__sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

    def type__sempred(self, localctx:Type_Context, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         




